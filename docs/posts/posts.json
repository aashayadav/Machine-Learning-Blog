[
  {
    "path": "posts/11-29-20_Alejandra/",
    "title": "Random Forest Model",
    "description": "This is how fitting a Random Forest model went for me!",
    "author": [
      {
        "name": "Alejandra Garcia Isaza",
        "url": {}
      }
    ],
    "date": "2020-12-07",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nPrep work\r\nLet‚Äôs dive in on the model fitting process!\r\nFirst round of tuning\r\nSecond round of tuning\r\nConclusionFinal fit\r\n\r\nKaggle submission\r\n\r\nTo complete this project, I chose to run a Random Forest model. I decided to go with the Out-of-Bag (OOB) samples to conduct model fitting and model assessment due to its relatively lower run time, as compared to using cross-validation resamples.\r\nInitially, I planned to work locally on my computer with only 5% of the data. Overall, my model tuning process was taking between 15 and 25 minutes each round of tuning, but unfortunately my R session froze several times and I could not finish the model tuning process.\r\nAt this point, Daniel suggested I use HPC via the Open On Demand interface. As always, I was afraid to try something new, but Daniel patiently showed me how to work with the new interface and explained for the 97th time what was the difference between the train and test files we have been working with all term long. I think I finally got it! I‚Äôm glad it only took me ten weeks üò¨ to understand this.\r\nPrep work\r\nI followed the same steps we have been following all term long, reading in the data, sampling a fraction of the data (note that I used 50% of the data because I was working with HPC), and joining with other datasets. Here I joined a dataset we called ‚Äúbonus‚Äù that inlcudes variables from different datasets. To learn more about this dataset and its variables, please go here\r\nA huge shout-out to Chris Ives for taking the time to find and process the bonus datasets we are using here.\r\n\r\n\r\nset.seed(3000)\r\n\r\nfull_train <- import(here(\"data\", \"train.csv\"), setclass = \"tbl_df\") %>%\r\n  select(-classification) %>%\r\n  mutate_if(is.character, factor) %>%\r\n  mutate(ncessch = as.double(ncessch)) %>%\r\n  sample_frac(0.5)\r\n\r\nbonus <- import(here(\"data\", \"bonus_data.csv\")) %>%\r\n  mutate(pupil_tch_ratio = as.numeric(pupil_tch_ratio)) %>%\r\n  mutate(ncessch = as.double(ncessch))\r\n\r\n## joining data\r\ndata <- left_join(full_train, bonus)\r\n\r\n\r\n\r\nHere I created the initial split and the train and test objects for model fitting and assessment. Notice that I did not create a cross-validation resample object because I was only using the OOB samples.\r\n\r\n\r\nset.seed(3000)\r\ndata_split <- initial_split(data)\r\n\r\nset.seed(3000)\r\ndata_train <- training(data_split)\r\ndata_test <- testing(data_split)\r\n\r\n\r\n\r\nI created a recipe following the recommended preprocessing steps for a Random Forest model. I found this guide that Joe shared with our group very useful.\r\nThis recipe is pretty straightforward, the only thing that I think is worth highlighting is that we took the liberty to assume that most of the students‚Äô home language was English; that is why we specified this code lang_cd = case_when(lang_cd == \"S\" ~ \"S\", TRUE ~ \"E\"). I took extra care not to lose the Spanish speaking students in the lang_cd variable to the step_nzv() near-zero variance variable removal due to the role of language in academic achievement.\r\nIn this model, we had one outcome score, 77 predictors and ten Id variables.\r\n\r\n\r\nrec <- recipe(score ~ ., data_train) %>%\r\n  step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),\r\n              lang_cd = case_when(lang_cd == \"S\" ~ \"S\", TRUE ~ \"E\"),\r\n              pupil_tch_ratio = as.numeric(pupil_tch_ratio)) %>% \r\n  update_role(contains(\"id\"), ncessch, ncesag, sch_name, new_role = \"id_vars\") %>%\r\n  step_zv(all_predictors(), -starts_with(\"lang_cd\")) %>%\r\n  step_medianimpute(all_numeric(), -all_outcomes(), -has_role(\"id_vars\")) %>%\r\n  step_novel(all_nominal()) %>%\r\n  step_unknown(all_nominal()) %>% \r\n  step_dummy(all_nominal()) %>%\r\n  step_nzv(all_predictors(), -starts_with(\"lang_cd\"))\r\n\r\n\r\n\r\nLet‚Äôs dive in on the model fitting process!\r\nFirst, I wanted to develop a baseline model using the default hypermarameters. I focused only on three hyperparameters: predictors mtry = floor(p/3), number of trees trees = 500, and minimun node size min_n = 5. In this model, mtry was around 26 predictors.\r\n\r\n\r\n# default model\r\nrf_def <- rand_forest() %>%\r\n  set_engine(\"ranger\",\r\n             num.threads = 8,\r\n             importance = \"permutation\",\r\n             verbose = TRUE) %>%\r\n  set_mode(\"regression\")\r\n\r\n# workflow for default model\r\nrf_def_wkflw <- workflow() %>% \r\n  add_model(rf_def) %>% \r\n  add_recipe(rec)\r\n\r\n# fitting the default model\r\nrf_def_fit <- fit(\r\n  rf_def_wkflw,\r\n  data_train)\r\n\r\n\r\n\r\nThe rmse for the default model was 88.80.\r\nFitting the default model with 50% of the data took less than 3 minutes using HPC!!\r\nFirst round of tuning\r\nRandom forest models are know to have very good out-of-the-box performance, however, I wanted to tune at least mtry and min_n to evaluate how much lower the rmse could be.\r\nI decided not to spend time tuning for number of trees as the literature suggests that growing p * 10 trees is pretty safe. The number of trees needs to be large enough to stabilize the error rate; for this model I could have used 770 trees, but I went for 1000 trees just to be extra safe.\r\nTo tune for mtry and min_n, I followed what Boehmke & Greenwell (2020) suggest in the chapter focused on random forest models in the book Hands-On Machine Learning with R\r\n‚ÄúStart with five evenly spaced values of mtry across the range 2 ‚Äì p centered at the recommended default‚Äù (Boehmke & Greenwell, 2020).\r\n‚ÄúWhen adjusting node size start with three values between 1‚Äì10 and adjust depending on impact to accuracy and run time (Boehmke & Greenwell, 2020).‚Äù\r\nHere I created a regular grid with 20 different combinations of mtry and min_n\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\"],[2,14,26,38,50,2,14,26,38,50,2,14,26,38,50,2,14,26,38,50],[1,1,1,1,1,4,4,4,4,4,7,7,7,7,7,10,10,10,10,10]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>mtry<\\/th>\\n      <th>min_n<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\nBelow is a function that Daniel helped me build. This is an all-in-one function that builds the model, updates the default model workflow with the new hyperparameters, fits the models with the selected hyperparameters, and outputs a table with the tuned hyperparameters and the corresponding rmse value. It‚Äôs pretty neat!\r\n\r\n\r\n# All-in-one function\r\nhyp_rf_search <- function(mtry_val, min_n_val, wf) {\r\n  mod <- rand_forest() %>% \r\n    set_engine(\"ranger\",\r\n               num.threads = 8,\r\n               importance = \"permutation\",\r\n               verbose = TRUE) %>% \r\n    set_mode(\"regression\") %>% \r\n    set_args(mtry = {{mtry_val}},\r\n             min_n = {{min_n_val}},\r\n             trees = 1000)\r\n  \r\n  wf <- wf %>% \r\n    update_model(mod)\r\n  \r\n  rmse <- fit(wf, data_train) %>% \r\n    extract_rmse()\r\n  \r\n  tibble(mtry = mtry_val, min_n = min_n_val, rmse = rmse, workflow = list(wf))\r\n}\r\n\r\n# Applying the function\r\nmtry_results_1 <- map2_df(grd$Var1, grd$Var2, ~hyp_rf_search(.x, .y, rf_def_wkflw))\r\n\r\n\r\n\r\nThe lowest rmse for this round of tuning was 88.54 with mtry = 14, min_n = 10, and trees = 1000. Running this first round of tuning took around an hour and forty minutes and the decrease on the rmse value relative to the default model was not substantial, only around three decimal points difference.\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\"],[14,14,26,14,38,14,26,50,38,26,50,26,38,50,38,50,2,2,2,2],[10,7,10,4,10,1,7,10,7,4,7,1,4,4,1,1,7,1,10,4],[88.5422609601283,88.9375105622991,89.2748002583518,89.3467365378118,89.6531075854499,89.7182599041209,89.7944994293632,89.9400737655761,90.3377558734669,90.5156819860458,90.6806244642205,91.1849421483674,91.2063236506577,91.742655109802,92.1480079640799,92.7881197919246,93.312497707138,93.3501092283632,93.3760153020166,93.3817847358467]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>mtry<\\/th>\\n      <th>min_n<\\/th>\\n      <th>rmse<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\nBy examining the plot, I could see that an mtry = 14 was consistently producing lower rmse values, however, higher values of min_n appeared to produce slighty lower values of rmse.\r\n\r\n\r\n\r\nSecond round of tuning\r\nOn the second round of tuning I chose a range of numbers between the two mtry values that produced the lowest rmse values, 14 and 26 (the recommended default). In addition, I chose a range of numbers that included the best two min_n values, 7 and 10, but also a few more numbers higher than ten to check if, as I intuited, higher values of min_n increased the performance of the models.\r\nFor this round of tuning, I created a regular grid with 25 different combinations of mtry and min_n\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\"],[14,17,20,23,26,14,17,20,23,26,14,17,20,23,26,14,17,20,23,26,14,17,20,23,26],[7,7,7,7,7,9,9,9,9,9,11,11,11,11,11,13,13,13,13,13,15,15,15,15,15]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>mtry<\\/th>\\n      <th>min_n<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\nI used the same all-in-one function shown above to run these models. The lowest rmse for this second round of tuning was 88.17 with mtry = 14, min_n = 15, and trees = 1000. The model fitting process took a little less than two hours and the decrease on the rmse value relative to the previous model was again of only three decimal points.\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\"],[14,17,14,20,17,14,23,20,26,17,14,23,20,26,17,14,23,26,20,17,23,20,26,23,26],[15,15,13,15,13,11,15,13,15,11,9,13,11,13,9,7,11,11,9,7,9,7,9,7,7],[88.1702701032027,88.2913312019863,88.2917472699144,88.4320547892268,88.4478151959256,88.4714496091745,88.5588965088155,88.6207445582953,88.6414907304891,88.6730477850128,88.6868663843177,88.7485721937091,88.8327314174613,88.8925891056003,88.9084821719671,88.9127044769608,88.9748487664824,89.1090208580788,89.123262575347,89.1928533213956,89.2882857406444,89.4205005670333,89.4284658762646,89.6031329821944,89.79396337313]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>mtry<\\/th>\\n      <th>min_n<\\/th>\\n      <th>rmse<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\nBy examining this plot, I confirmed what I intuited in the first round of tuning, that an mtry = 14 consistently produced the lowest rmse values and that higher values of min_n continued to produce lower values of rmse.\r\nI could have kept tuning for higher values of min_n, however, I thought that the cost in time was not worth the small gain in decrease of rmse values.\r\n\r\n\r\n\r\nConclusion\r\nTaking it all together, the default model was without a doubt the one that had the higher cost/benefit return, it only took around three minutes to fit! Whereas each round of tuning took around two hours, with very little return (imo). I guess that the person who said that random forest models have great out-of-the-box performance was not joking!\r\nFinal fit\r\nAt this point I was convinced that continue to tune was not worth the time, however, I had already spent quite a bit of time in model tuning so I decided to use mtry = 14 and a min_n = 15, the hyperparameters that produced the lowest rmse on my model tuning process.\r\n\r\n\r\n# final model with hard coded hyperparameters\r\nfinal_mod <- rand_forest() %>%\r\n  set_engine(\"ranger\",\r\n             num.threads = 8,\r\n             importance = \"permutation\",\r\n             verbose = TRUE) %>%\r\n  set_mode(\"regression\") %>%\r\n  set_args(mtry = 14,\r\n           min_n = 15,\r\n           trees = 1000)\r\n\r\n# workflow for final model\r\nfinal_wkfl <-  workflow() %>%\r\n  add_model(final_mod) %>%\r\n  add_recipe(rec)\r\n\r\n# final split on the initial split\r\nfinal_fit <- last_fit(final_wkfl,\r\n                      split = data_split)\r\n\r\n\r\n\r\nFitting the final model took around 4 minutes and the resulting rmse was 88.3.\r\nKaggle submission\r\nThe next step was to submit predictions to Kaggle to test how the model performed when compared against the true values. To do this I had to fit the model using the unsplit dataset called data, read in the test.csv file, join the bonus data, prep and bake the recipe and create a dataframe with the predicted score values.\r\n\r\n\r\n# fit with the unsplit data\r\ncheck_fit <- final_wkfl %>%\r\n                 fit(data)\r\n\r\n# read in test.csv file\r\nfull_test <- import(\"data/test.csv\", setclass = \"tbl_df\") %>%\r\n  mutate_if(is.character, factor) %>%\r\n  mutate(ncessch = as.double(ncessch))\r\n\r\n## joining data\r\nall_test <- left_join(full_test, bonus)\r\n\r\n# baking the recipe\r\nprocessed_test <- rec %>%\r\n  prep() %>% \r\n  bake(all_test)\r\n\r\n# make predictions\r\npreds <- predict(check_fit, all_test)\r\n\r\n# a tibble\r\npred_frame <- tibble(Id = all_test$id, Predicted = preds$.pred)\r\n\r\n\r\n\r\nThis table shows only the first six rows of data:\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],[4,6,8,9,11,15],[2492.97321250139,2501.58582718069,2668.15853429978,2464.77458894793,2530.78887087146,2487.80269035691]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Id<\\/th>\\n      <th>Predicted<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\n\r\nI was gladly surprised to find that the model performed better than expected! ü•≥\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-07T18:09:06-08:00",
    "input_file": {}
  },
  {
    "path": "posts/11-29-20_Asha/",
    "title": "Linear Regression and Penalized Regression Model (Lasso)",
    "description": "Our aim is to predict the score on statewide testing assessment using other variables in the dataset. Let's see how linear and lasso regression perform.",
    "author": [
      {
        "name": "Asha",
        "url": {}
      }
    ],
    "date": "2020-11-28",
    "categories": [],
    "contents": "\r\nTable of Contents\r\n1.Splitting and resampling1a. Splitting\r\n1b. Resampling\r\n\r\n2.Pre-processing\r\n3. Linear model\r\n4. Lasso Regression (Type of penalized Regression)\r\n1.Splitting and resampling\r\nData splitting and resampling is a method to ensure that predictive performance of ML model is unbiased.\r\n1a. Splitting\r\nWe will split our dataset into training and testing set. The training data will be used to fit our model and tune its parameters, whereas the testing data will be used to evaluate our final model‚Äôs performance.\r\nWe will use initial_split() function from the rsample package which creates a split object. The split object d_split, tells how many observations we have in our training and testing set (trainin set = 75% & testing set = 25%).\r\n\r\n\r\nset.seed(3000)\r\n# Create split object specifying (75%) and testing (25%)\r\n\r\ndata_split <- initial_split(data, prop = 3/4) \r\n\r\ndata_split\r\n\r\n<Analysis/Assess/Total>\r\n<1421/473/1894>\r\n\r\nWe will extract the training and testing set from the split object, d_split by using the training() and testing() functions.\r\n\r\n\r\n# Extract training and testing set\r\nset.seed(3000)\r\n\r\ndata_train <- training(data_split)  # Our training dataset has 1421 observations.\r\n\r\ndata_test <- testing(data_split)    # Our test dataset has 473 observations.\r\n\r\n1b. Resampling\r\nAt some point, ML models require parameters tuning (adjustment). In order to prepare for tuning, we resample our data. Resampling reduces bias from over-fitting the data. There are several methods to resample the data and the two most effective and frequently used are 10-fold cross validation and bootstrapping. In our project, we‚Äôll resample our data using vfold_cv(). This function outputs k-fold cross-validated versions of our training data, where k = number of time we resample.\r\n\r\n\r\n# Resample the data with 10-fold cross validation.\r\nset.seed(3000)\r\ncv <- vfold_cv(data_train)\r\n\r\n2.Pre-processing\r\nPreprocessing is a way of converting data from the raw form to a more usable form for the ML modeling purpose. The pre-processing involves defining roles of variables using role-specifying functions such as all_numeric(), all_predictors() as arguments to pre-processing steps. Pre-processing also involves steps such as imputation (step_medianimpute), rescaling (step_scale), standardizing (step_normalize), PCA (step_pca) and creating dummy variables (step_dummy). A full list of pre-processing can be found here.\r\nWe will use recipe() function to indicate our outcome and predictor variables in our recipe. We will use ~. to indicate that we are using all variables to predict the outcome variable score. All recipe takes from the data object at this point is the names and roles of the outcome and predictor variables. We will apply this recipe to specific dataset later. Therefore, when we print summary of object, rec, it shows numbers of predictor variables have been specified. It doen‚Äôt actually apply the predictors yet. We will use same receipe throughout this post.\r\n\r\n\r\nset.seed(3000)\r\n\r\nrec <- recipe(score ~ ., data_train) %>% \r\n  step_mutate(tst_dt = as.numeric(lubridate::\r\n                                    mdy_hms(tst_dt))) %>% # convert `test date` variable to a date \r\n  update_role(contains(\"id\"), ncessch, new_role = \"id vars\") %>% # declare ID variables\r\n  step_nzv(all_predictors(), freq_cut = 0, unique_cut = 0) %>% # remove variables with zero variances\r\n  step_novel(all_nominal()) %>% # prepares test data to handle previously unseen factor levels \r\n  step_unknown(all_nominal()) %>% # categorizes missing categorical data (NA's) as `unknown`\r\n  step_medianimpute(all_numeric(), -all_outcomes(), \r\n                    -has_role(\"id vars\"))  %>% # replaces missing numeric observations with the median\r\n  step_dummy(all_nominal(), -has_role(\"id vars\")) %>% # dummy codes categorical variables\r\n  step_nzv(all_predictors(), -starts_with(\"lang_cd\"))\r\n\r\nExtract the pre-processed dataset\r\nTo extract the pre-processed dataset, we can prep() the recipe for our datset then bake() the prepped recipe to extract the pre-processed data.\r\nHowever, in tidymodels we can use workflows() where we don‚Äôt need to prep() or bake() the recipe.\r\n\r\n\r\nprep(rec) #%>%\r\n\r\nData Recipe\r\n\r\nInputs:\r\n\r\n      role #variables\r\n   id vars          8\r\n   outcome          1\r\n predictor         79\r\n\r\nTraining data contained 1421 data points and 1421 incomplete rows. \r\n\r\nOperations:\r\n\r\nVariable mutation for tst_dt [trained]\r\nSparse, unbalanced variable filter removed calc_admn_cd, lang_cd [trained]\r\nNovel factor level assignment for gndr, ethnic_cd, ... [trained]\r\nUnknown factor level assignment for gndr, ethnic_cd, ... [trained]\r\nMedian Imputation for enrl_grd, tst_dt, lat, lon, ... [trained]\r\nDummy variables from gndr, ethnic_cd, tst_bnch, ... [trained]\r\nSparse, unbalanced variable filter removed gndr_new, ... [trained]\r\n\r\n # bake(data_train)   # We are using workflow so no need to bake.\r\n\r\nThe next step is to specify our ML models, using the parsnip package. To specify the model, there are four primary components: model type, arguments, engine, and mode.\r\n3. Linear model\r\n\r\n\r\nset.seed(3000)\r\n\r\n# Specify the model\r\n\r\nmod_linear <- linear_reg() %>%\r\n  set_engine(\"lm\") %>%  # engine for linear regression\r\n  set_mode(\"regression\")  # regression for continous outcome varaible.\r\n\r\n# Workflow\r\nlm_wf <- workflow() %>% # set the workflow\r\n  add_recipe(rec) %>% # add recipe\r\n  add_model(mod_linear) # add model\r\n  \r\n\r\n# Fit the linear model\r\nmod_linear_fit<- fit_resamples(\r\n  mod_linear,\r\n  preprocessor = rec,\r\n  resamples = cv,\r\n  metrics = metric_set(rmse),\r\n  control = control_resamples(verbose = TRUE,\r\n                                    save_pred = TRUE))\r\n\r\nCollect metrics on linear model\r\n\r\n\r\nset.seed(3000)\r\n\r\nmod_linear_fit %>%\r\n  collect_metrics() %>%\r\n  filter(.metric == \"rmse\") \r\n\r\n# A tibble: 1 x 5\r\n  .metric .estimator  mean     n std_err\r\n  <chr>   <chr>      <dbl> <int>   <dbl>\r\n1 rmse    standard    96.3    10    2.49\r\n\r\n#RMSE = 96.28\r\n\r\nOur data has multiple variables and some of them are highly correlated. In case like this, linear model usually performs poorly. So let‚Äôs try other alternatives such as penalized regression. We will use the same recipe (i.e. rec) for all models in this post. We will use tune_grid() to perform a grid search for the best combination of tuned hyperparameters such penalty.\r\n4. Lasso Regression (Type of penalized Regression)\r\n\r\n\r\n# Specify the model\r\n\r\nset.seed(3000)\r\n\r\n# specity lasso with random penalty value and set 1 for mixture.\r\nlasso_mod <- linear_reg(penalty = 0.1, mixture = 1) %>%\r\n  set_engine(\"glmnet\") \r\n\r\nwf_lasso <- workflow() %>%\r\n   add_recipe(rec)\r\n\r\nlasso_fit <- wf_lasso %>%\r\n  add_model(lasso_mod) %>%\r\n  fit(data = data_train)\r\n\r\n\r\nlasso_fit %>%\r\n  pull_workflow_fit() %>%\r\n  tidy()\r\n\r\n# A tibble: 80 x 3\r\n   term        estimate penalty\r\n   <chr>          <dbl>   <dbl>\r\n 1 (Intercept) -6.64e+3     0.1\r\n 2 enrl_grd     2.74e+1     0.1\r\n 3 tst_dt       4.49e-6     0.1\r\n 4 lat         -6.14e-1     0.1\r\n 5 lon         -3.36e+0     0.1\r\n 6 ncesag       0.          0.1\r\n 7 zip          1.65e-2     0.1\r\n 8 total_n     -1.57e-3     0.1\r\n 9 fr_lnch_n   -8.84e-2     0.1\r\n10 red_lnch_n   4.70e-1     0.1\r\n# ... with 70 more rows\r\n\r\nTune Lasso parameters We will use resampling and tuning to figure out right regularization parameter ‚Äôpenalty`\r\n\r\n\r\n# Tuning lasso parameters\r\n\r\nset.seed(3000)\r\n\r\ntune_lasso <- linear_reg(penalty = tune(), mixture = 1) %>%\r\n  set_engine(\"glmnet\")\r\n\r\n# Tune the lasso grid\r\nlambda_grid <- grid_regular(penalty(), levels = 50)\r\n\r\nTune the grid using workflow object\r\n\r\n\r\ndoParallel::registerDoParallel()\r\n\r\nset.seed(3000)\r\nlasso_grid <- tune_grid(\r\n  wf_lasso %>%\r\n    add_model(tune_lasso), \r\n  resamples = cv,\r\n  grid = lambda_grid\r\n)\r\n\r\n\r\n\r\n# Results\r\n\r\nlasso_grid %>%\r\n  collect_metrics()\r\n\r\n# A tibble: 100 x 7\r\n    penalty .metric .estimator   mean     n std_err .config\r\n      <dbl> <chr>   <chr>       <dbl> <int>   <dbl> <fct>  \r\n 1 1.00e-10 rmse    standard   95.9      10  2.50   Model01\r\n 2 1.00e-10 rsq     standard    0.362    10  0.0169 Model01\r\n 3 1.60e-10 rmse    standard   95.9      10  2.50   Model02\r\n 4 1.60e-10 rsq     standard    0.362    10  0.0169 Model02\r\n 5 2.56e-10 rmse    standard   95.9      10  2.50   Model03\r\n 6 2.56e-10 rsq     standard    0.362    10  0.0169 Model03\r\n 7 4.09e-10 rmse    standard   95.9      10  2.50   Model04\r\n 8 4.09e-10 rsq     standard    0.362    10  0.0169 Model04\r\n 9 6.55e-10 rmse    standard   95.9      10  2.50   Model05\r\n10 6.55e-10 rsq     standard    0.362    10  0.0169 Model05\r\n# ... with 90 more rows\r\n\r\n# RMSE = 95.94\r\n\r\nVisualize the performance Results look fine so let‚Äôs visualize the performance with the regularization parameters.\r\n\r\n\r\noptions(scipen = 999)\r\n\r\nlasso_grid %>%\r\n  collect_metrics() %>%\r\n  ggplot(aes(penalty, mean, color = .metric)) +\r\n  geom_errorbar(aes(\r\n    ymin = mean - std_err,\r\n    ymax = mean + std_err\r\n  ),\r\n  alpha = 0.5\r\n  ) +\r\n  geom_line(size = 1.5) +\r\n  facet_wrap(~.metric, scales = \"free\", nrow = 2) +\r\n  scale_x_log10() +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\nFor choosing our final parameters, let‚Äôs get the lowest RMSE. Once we have the lowest RMSE, we can finalize our workflow by updating with lowest RMSE.\r\n\r\n\r\nlowest_rmse <- lasso_grid %>%\r\n  select_best(\"rmse\")\r\n\r\nfinal_lasso <- finalize_workflow(\r\n  wf_lasso %>% add_model(tune_lasso),\r\n  lowest_rmse\r\n)\r\n\r\n\r\n\r\nlibrary(vip)\r\n\r\nfinal_lasso %>%\r\n  fit(data_train) %>%\r\n  pull_workflow_fit() %>%\r\n  vi(lambda = lowest_rmse$penalty) %>%\r\n  mutate(\r\n    Importance = abs(Importance),\r\n    Variable = fct_reorder(Variable, Importance)\r\n  ) %>%\r\n  ggplot(aes(x = Importance, y = Variable, fill = Sign)) +\r\n  geom_col() +\r\n  scale_x_continuous(expand = c(0, 0)) +\r\n  labs(y = NULL)\r\n\r\n\r\n\r\n\r\nlast_fit(\r\n  final_lasso,\r\n  data_split) %>%\r\n  collect_metrics()\r\n\r\n# A tibble: 2 x 3\r\n  .metric .estimator .estimate\r\n  <chr>   <chr>          <dbl>\r\n1 rmse    standard      90.0  \r\n2 rsq     standard       0.424\r\n\r\n# RMSE for full dataset = 89.95\r\n\r\n\r\n\r\n",
    "preview": "posts/11-29-20_Asha/Linear_model_files/figure-html5/unnamed-chunk-13-1.png",
    "last_modified": "2020-12-07T16:53:51-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/11-29-20_Chris/",
    "title": "XG Boost",
    "description": "Tuning process and final model summary",
    "author": [
      {
        "name": "Chris Ives",
        "url": {}
      }
    ],
    "date": "2020-11-28",
    "categories": [],
    "contents": "\n\nContents\nData Import\nRecipeRecipe Notes\n\nTuning HyperparametersApproach #1: Tuning Gamma FirstTuning Results\n\nFollow-up Tree-Parameter TuningCreate Grid\nSpecify Model\nTuning Results\n\nApproach #2: Tuning Tree Parameters FirstSpecify Model\nTuning Results\nFollowup Gamma Tuning\nFine Tuning Gamma\n\nEvaluating Approaches\nTune Stochastic ParametersSpecify Model\nTuning Results\n\nRetune Learning RateSpecify Model\n\n\nTune Number of Trees\nFinal Fit StatisticsGenerate Final Fit\nFit to test set\nFinal Fit Results\nFeature Importance Plot of Final Model (Top 35)\n\n\nData Import\n\n\ndata <- read.csv(\"data/train.csv\") %>%\n  select(-classification) %>%\n  mutate_if(is.character, factor) %>%\n  mutate(ncessch = as.numeric(ncessch))\n\nbonus <- read.csv(\"data/bonus_data_v2.csv\") %>%\n  mutate(ncessch = as.numeric(ncessch)) %>%\n  mutate(locale = gsub(\"^.{0,3}\", \"\", locale)) %>%\n  separate(col = locale, into = c(\"locale\", \"sublocale\"), sep = \": \")\n\ndisc <- read_csv(\"data/disc_drop.csv\") %>%\n  mutate(attnd_dist_inst_id = as.double(attnd_dist_inst_id))\n\n## join data\ndata <- data %>% \n  left_join(bonus) %>% \n  left_join(disc)\n\n\n\nData was merged from three files:\nOriginal Competition Training Dataset\n‚ÄúBonus Dataset‚Äù with additional variables collected by zip code, NCES school IDs, state school IDs, and county levels\nSupplemental small dataset of high school dropout rates and out-of-school suspension rates by state district IDs\nDropout Rate Data Source: https://www.oregon.gov/ode/reports-and-data/students/Pages/Dropout-Rates.aspx\nSuspension Rate Data Source: https://www.oregon.gov/ode/students-and-family/healthsafety/Pages/School-Discipline,-Bullying,-Restraint-and-Seclusion.aspx\n\nImportantly, the bonus data includes the variables described in the original data description page, as well as the following:\n2016-2017 District Finance Data:\nTotal revenue (rev_total)\nTotal local revenue (rev_local_total)\nTotal state revenue (rev_state_total)\nTotal federal revenue (rev_fed_total)\nTotal expenditures (exp_total)\nTotal current expenditures for elementary and secondary education (exp_current_elsec_total)\nTotal current expenditures for instruction (exp_current_instruction_total)\nTotal current expenditures for support services (exp_current_supp_serve_total)\nTotal capital outlay expenditures (outlay_capital_total)\nTotal salary amount (salaries_total)\nTotal employee benefits in dollars (benefits_employee_total)\nNumber of students for which the reporting local education agency is financially responsible (enrollment_fall_responsible)\n\nDistrict financial data was obtained using the educationdata R package.\nLastly, district finance data was included in both its raw form, and transformed by dividing each revenue and expenditure value by the number of students the LEA was financially responsible for (e.g., exp_total/enrollment_fall_responsible)\nRecipe\n\n\n\n\n\nrec <- recipe(score ~ ., train) %>%\n  step_mutate(tst_dt = as.numeric(lubridate::mdy_hms(tst_dt)),\n              lang_cd = case_when(lang_cd == \"S\" ~ \"S\", TRUE ~ \"E\"),\n              pupil_tch_ratio = as.numeric(pupil_tch_ratio),\n              pupil_tch_ratio = as.numeric(pupil_tch_ratio),\n              pupil_tch_rate = case_when(pupil_tch_ratio < 18 ~ 1,\n                                         pupil_tch_ratio < 25 ~ 2,\n                                         pupil_tch_ratio < 30 ~ 3, \n                                         TRUE ~ 4),\n              pupil_tch_rate = as.factor(pupil_tch_rate)) %>% \n  step_rm(contains(\"id\"), ncessch, ncesag, lea_name, sch_name) %>%\n  step_mutate(hpi = as.numeric(hpi),\n              lat = round(lat, 2),\n              lon = round(lon, 2),\n              median_income = log(median_income),\n              frl_prop = fr_lnch_prop + red_lnch_prop,\n              schl_perf = case_when(sch_percent_level_1 + sch_percent_level_2 > sch_percent_level_3 + sch_percent_level_4 ~ 1,\n                                    TRUE ~ 0),\n              over_100 = under_200 + over_200) %>% \n  step_interact(terms = ~ lat:lon) %>% \n  step_rm(fr_lnch_prop, red_lnch_prop) %>% \n  step_string2factor(all_nominal()) %>% \n  step_zv(all_predictors()) %>%\n  step_unknown(all_nominal()) %>% \n  step_medianimpute(all_numeric()) %>%\n  step_dummy(all_nominal(), one_hot = TRUE) %>% \n  step_interact(~ exp_current_supp_serve_total.x:sp_ed_fg_Y) %>% \n  step_interact(~ lang_cd_S:p_hispanic_latino) %>% \n  step_nzv(all_predictors(), freq_cut = 995/5)\n\nbaked_train <- prep(rec) %>% \n  bake(train)\n\ntrain_x = data.matrix(baked_train[, -73])\ntrain_y = data.matrix(baked_train[, 73])\n\n\n\nRecipe Notes\nPupil/Teacher ratio (pupil_tch_ratio) is binned and treated as a factor to remove noise (pupil_tch_rate). Both ratio and binned version of the variable remain in the data.\nID variables are removed\nLatitude (lat) and longitude (lon) are rounded to two decimal places to reduce noise and limit precision to within 2/3 of a mile.\nMedian income is log transformed, as the variations in income level are expected to have greater effect near the poverty threshold and less effect in higher income brackets.\nFree lunch proportions and reduced lunch proportions are collapsed into a single variable frl_prop given their expected similar effects.\nFree lunch proportions (fr_lnch_prop) and reduced lunch proportions (red_lnch_prop) are removed from the data set in lieu of their combined proportion.\n\nA dummy coded school-level variable (schl_perf) is created that denotes whether the percentage of students reaching proficiency on the EOY state test exceeds the percentage of students that fall below proficiency standards.\nZero variance predictors are removed\nMissing data is median imputed\nExplicit interaction is specified between the student-level special education flag and the per-student district expenditures for special services. Th effect of special education status is expected to vary depending on the funding available and potential quality of the district‚Äôs special services.\nExplicit interaction is specified for the effect of Spanish language code (lang_cd) and percentage of Hispanic/Latino students at the school (p_hispanic_latino). The justification is that Spanish-speaking students are expected to receive less effective supports in schools in which they are a greater minority.\nNear-zero variance predictors are removed\nTuning Hyperparameters\nBecause the loss reduction (gamma) and maximum tree depth are highly dependent on one another, two approaches were taken to tune the initial model. One approach involved first tuning loss reduction, followed by tree depth and hessian weights. The other involved tuning tree complexity and hessian weights without any severe loss reduction regularization, and then pruning it back by tuning gamma. All tuning was done using the full training dataset.\nApproach #1: Tuning Gamma First\n\n\nbaked_train <- prep(rec) %>% \n  bake(train)\n\ntrain_x = data.matrix(baked_train[, -73])\ntrain_y = data.matrix(baked_train[, 73])\n\ngrid <- expand.grid(loss_reduction = seq(0, 80, 5))\n\ngamma_mods <- map(grid$loss_reduction, ~{\n  xgb.cv(\n    data = train_x,\n    label = train_y,\n    nrounds = 10000,\n    objective = \"reg:squarederror\",\n    early_stopping_rounds = 50,\n    nfold = 10,\n    verbose = 1,\n    params = list(\n      eta = 0.1,\n      gamma = .x,\n      nthread = 24\n    )\n  )\n})\n\n\n\nTuning Results\n\n    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  452         77.0087         0.0983        82.6056        0.6781\n 2:  448         77.0472         0.0837        82.6143        0.4099\n 3:  445         77.0877         0.0555        82.6204        0.5452\n 4:  524         76.3820         0.1016        82.6213        0.5638\n 5:  436         77.1400         0.0551        82.6243        0.3445\n 6:  452         77.0063         0.0802        82.6287        0.5083\n 7:  416         77.3305         0.0714        82.6291        0.7941\n 8:  447         77.0524         0.0613        82.6352        0.5932\n 9:  424         77.2553         0.0888        82.6371        0.8803\n10:  465         76.9038         0.0983        82.6379        0.5911\n    eta gamma\n 1: 0.1    10\n 2: 0.1    50\n 3: 0.1    30\n 4: 0.1    55\n 5: 0.1    70\n 6: 0.1    80\n 7: 0.1    45\n 8: 0.1    15\n 9: 0.1    20\n10: 0.1    40\n\n\nAs indicated in the results, a gamma of 10 produced the best fit the to test folds. A gamma of 50 was considered as a potential alternative given its lower RMSE SD; however, 50 was considered too extreme of a regularization setting.\nA follow-up gamma tuning process was conducted with a narrowed range of 5 to 15 and is reported below.\ngrid <- expand.grid(loss_reduction = seq(5, 15, 1))\n\n    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  426         77.1033         0.0673        82.6085        0.5934\n 2:  440         76.9364         0.0804        82.6233        0.6727\n 3:  411         77.2343         0.0918        82.6301        0.5782\n 4:  470         76.7071         0.0412        82.6407        0.4116\n 5:  452         76.8494         0.0946        82.6417        0.5207\n 6:  497         76.4667         0.0793        82.6423        0.3931\n 7:  478         76.6126         0.0703        82.6454        0.3906\n 8:  427         77.0770         0.0583        82.6646        0.5045\n 9:  389         77.4035         0.1140        82.6658        0.6899\n10:  381         77.5321         0.0441        82.6747        0.4971\n    eta gamma\n 1: 0.1    12\n 2: 0.1    13\n 3: 0.1    15\n 4: 0.1    14\n 5: 0.1    11\n 6: 0.1     9\n 7: 0.1     6\n 8: 0.1     8\n 9: 0.1     7\n10: 0.1     5\n\n\nAfter second round of tuning, a gamma value of 12 produced the best fit.\nBest gamma value = 12\nRMSE/SD to beat = 82.6085/0.5934\nFollow-up Tree-Parameter Tuning\nCreate Grid\n\n\n# Set learning rate, tune tree specific parameters\ngrid <- grid_max_entropy(min_n(c(4, 12)), # min_child_weight\n                         tree_depth(), # max_depth\n                         size = 30)\nhead(grid)\n\n\n# A tibble: 6 x 2\n  min_n tree_depth\n  <int>      <int>\n1    12         13\n2    10         12\n3     7         12\n4     8          5\n5     9         14\n6     5          7\n\nSpecify Model\n\n\ntree_mods <- map2(grid$min_n, grid$tree_depth, ~{\n  xgb.cv(\n    data = train_x,\n    label = train_y,\n    nrounds = 5000,\n    objective = \"reg:squarederror\",\n    early_stopping_rounds = 50, \n    nfold = 10,\n    verbose = 1,\n    params = list( \n      eta = 0.1,\n      gamma = 12, \n      min_child_weight = .x,\n      max_depth = .y,\n      nthread = 24\n    ) \n  )  \n}) \n\n\n\nTuning Results\n\n\n{\"x\":{\"visdat\":{\"efc316738e8d\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"efc316738e8d\",\"attrs\":{\"efc316738e8d\":{\"x\":{},\"y\":{},\"z\":{},\"marker\":{\"size\":5},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"min_child_weight\"},\"yaxis\":{\"title\":\"max_depth\"},\"zaxis\":{\"title\":\"test_rmse_mean\"}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[42,47,33,31,39,18,41,31,49,50,50,8,18,38,2,22,22,49,10,37,13,38,23,29,31,10,1,5,44,3],\"y\":[9,7,9,5,7,5,5,6,4,10,11,5,8,11,7,3,11,13,9,3,11,14,14,15,2,13,11,13,1,1],\"z\":[82.5145417,82.5371338,82.5425514,82.5442901,82.5475464,82.5559967,82.5578004,82.5624109,82.5731157,82.5927047,82.6007805,82.601892,82.6220056,82.6244148,82.6763656,82.6869271,82.6877203,82.6914842,82.7015336,82.7148949,82.79383,82.814676,82.9005066,82.9449509,82.9704437,83.0080811,83.0145393,83.1440653,84.5998801,84.6120261],\"marker\":{\"colorbar\":{\"title\":\"test_rmse_mean\",\"ticklen\":2},\"cmin\":82.5145417,\"cmax\":84.6120261,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666641\",\"rgba(70,19,97,1)\"],[\"0.083333333333335\",\"rgba(72,32,111,1)\"],[\"0.124999999999999\",\"rgba(71,45,122,1)\"],[\"0.16666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333334\",\"rgba(64,70,135,1)\"],[\"0.249999999999998\",\"rgba(60,82,138,1)\"],[\"0.291666666666669\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.374999999999997\",\"rgba(46,114,142,1)\"],[\"0.416666666666668\",\"rgba(42,123,142,1)\"],[\"0.458333333333332\",\"rgba(38,133,141,1)\"],[\"0.499999999999997\",\"rgba(37,144,140,1)\"],[\"0.541666666666668\",\"rgba(33,154,138,1)\"],[\"0.583333333333332\",\"rgba(39,164,133,1)\"],[\"0.625000000000003\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333331\",\"rgba(79,191,110,1)\"],[\"0.750000000000002\",\"rgba(98,199,98,1)\"],[\"0.791666666666666\",\"rgba(119,207,85,1)\"],[\"0.833333333333337\",\"rgba(147,214,70,1)\"],[\"0.875000000000001\",\"rgba(172,220,52,1)\"],[\"0.916666666666665\",\"rgba(199,225,42,1)\"],[\"0.958333333333336\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"color\":[82.5145417,82.5371338,82.5425514,82.5442901,82.5475464,82.5559967,82.5578004,82.5624109,82.5731157,82.5927047,82.6007805,82.601892,82.6220056,82.6244148,82.6763656,82.6869271,82.6877203,82.6914842,82.7015336,82.7148949,82.79383,82.814676,82.9005066,82.9449509,82.9704437,83.0080811,83.0145393,83.1440653,84.5998801,84.6120261],\"size\":5,\"line\":{\"colorbar\":{\"title\":\"\",\"ticklen\":2},\"cmin\":82.5145417,\"cmax\":84.6120261,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666641\",\"rgba(70,19,97,1)\"],[\"0.083333333333335\",\"rgba(72,32,111,1)\"],[\"0.124999999999999\",\"rgba(71,45,122,1)\"],[\"0.16666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333334\",\"rgba(64,70,135,1)\"],[\"0.249999999999998\",\"rgba(60,82,138,1)\"],[\"0.291666666666669\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.374999999999997\",\"rgba(46,114,142,1)\"],[\"0.416666666666668\",\"rgba(42,123,142,1)\"],[\"0.458333333333332\",\"rgba(38,133,141,1)\"],[\"0.499999999999997\",\"rgba(37,144,140,1)\"],[\"0.541666666666668\",\"rgba(33,154,138,1)\"],[\"0.583333333333332\",\"rgba(39,164,133,1)\"],[\"0.625000000000003\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333331\",\"rgba(79,191,110,1)\"],[\"0.750000000000002\",\"rgba(98,199,98,1)\"],[\"0.791666666666666\",\"rgba(119,207,85,1)\"],[\"0.833333333333337\",\"rgba(147,214,70,1)\"],[\"0.875000000000001\",\"rgba(172,220,52,1)\"],[\"0.916666666666665\",\"rgba(199,225,42,1)\"],[\"0.958333333333336\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"color\":[82.5145417,82.5371338,82.5425514,82.5442901,82.5475464,82.5559967,82.5578004,82.5624109,82.5731157,82.5927047,82.6007805,82.601892,82.6220056,82.6244148,82.6763656,82.6869271,82.6877203,82.6914842,82.7015336,82.7148949,82.79383,82.814676,82.9005066,82.9449509,82.9704437,83.0080811,83.0145393,83.1440653,84.5998801,84.6120261]}},\"type\":\"scatter3d\",\"mode\":\"markers\",\"frame\":null},{\"x\":[1,50],\"y\":[1,15],\"type\":\"scatter3d\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"none\",\"showlegend\":false,\"marker\":{\"colorbar\":{\"title\":\"test_rmse_mean\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"cmin\":82.5145417,\"cmax\":84.6120261,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666641\",\"rgba(70,19,97,1)\"],[\"0.083333333333335\",\"rgba(72,32,111,1)\"],[\"0.124999999999999\",\"rgba(71,45,122,1)\"],[\"0.16666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333334\",\"rgba(64,70,135,1)\"],[\"0.249999999999998\",\"rgba(60,82,138,1)\"],[\"0.291666666666669\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.374999999999997\",\"rgba(46,114,142,1)\"],[\"0.416666666666668\",\"rgba(42,123,142,1)\"],[\"0.458333333333332\",\"rgba(38,133,141,1)\"],[\"0.499999999999997\",\"rgba(37,144,140,1)\"],[\"0.541666666666668\",\"rgba(33,154,138,1)\"],[\"0.583333333333332\",\"rgba(39,164,133,1)\"],[\"0.625000000000003\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333331\",\"rgba(79,191,110,1)\"],[\"0.750000000000002\",\"rgba(98,199,98,1)\"],[\"0.791666666666666\",\"rgba(119,207,85,1)\"],[\"0.833333333333337\",\"rgba(147,214,70,1)\"],[\"0.875000000000001\",\"rgba(172,220,52,1)\"],[\"0.916666666666665\",\"rgba(199,225,42,1)\"],[\"0.958333333333336\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":true,\"color\":[82.5145417,84.6120261],\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"z\":[82.5145417,84.6120261],\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  426         77.1033         0.0673        82.6085        0.5934\n 2:  440         76.9364         0.0804        82.6233        0.6727\n 3:  411         77.2343         0.0918        82.6301        0.5782\n 4:  470         76.7071         0.0412        82.6407        0.4116\n 5:  452         76.8494         0.0946        82.6417        0.5207\n 6:  497         76.4667         0.0793        82.6423        0.3931\n 7:  478         76.6126         0.0703        82.6454        0.3906\n 8:  427         77.0770         0.0583        82.6646        0.5045\n 9:  389         77.4035         0.1140        82.6658        0.6899\n10:  381         77.5321         0.0441        82.6747        0.4971\n    eta gamma\n 1: 0.1    12\n 2: 0.1    13\n 3: 0.1    15\n 4: 0.1    14\n 5: 0.1    11\n 6: 0.1     9\n 7: 0.1     6\n 8: 0.1     8\n 9: 0.1     7\n10: 0.1     5\n\nA min_child_weight of 42 and max_depth of 9 demonstrate the best fit to the test folds and have a low SD relative to other hyperparameter tunings.\nTuning Summary:\ngamma = 12\nmin_child_weight = 42\nmax_depth = 9\nFinal RMSE/SD to beat: 82.5145/0.4865\nApproach #2: Tuning Tree Parameters First\nSpecify Model\n\n\ntree_mods <- map2(grid$min_n, grid$tree_depth, ~{\n  xgb.cv(\n    data = train_x,\n    label = train_y,\n    nrounds = 5000,\n    objective = \"reg:squarederror\",\n    early_stopping_rounds = 50, \n    nfold = 10,\n    verbose = 1,\n    params = list( \n      eta = 0.1,\n      min_child_weight = .x,\n      max_depth = .y,\n      nthread = 24\n    ) \n  )  \n}) \n\n\n\nTuning Results\n\n\n{\"x\":{\"visdat\":{\"efc337c73f6\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"efc337c73f6\",\"attrs\":{\"efc337c73f6\":{\"x\":{},\"y\":{},\"z\":{},\"marker\":{\"size\":5},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"min_child_weight\"},\"yaxis\":{\"title\":\"max_depth\"},\"zaxis\":{\"title\":\"test_rmse_mean\"}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[31,50,33,39,47,41,31,42,18,18,8,49,50,38,2,49,37,10,22,13,22,38,29,23,31,10,1,5,3,44],\"y\":[6,10,9,7,7,5,5,9,5,8,5,4,11,11,7,13,3,9,3,11,11,14,15,14,2,13,11,13,1,1],\"z\":[82.5124091,82.5301652,82.5313851,82.5396958,82.5406203,82.5474305,82.5509614,82.568315,82.5730545,82.5890701,82.6059165,82.6113472,82.6179329,82.6347573,82.6624367,82.6903612,82.6917137,82.7149749,82.727191,82.7310548,82.7431975,82.7834778,82.8315184,82.9064498,82.9607202,82.9930764,83.0443854,83.1455025,84.606839,84.6138031],\"marker\":{\"colorbar\":{\"title\":\"test_rmse_mean\",\"ticklen\":2},\"cmin\":82.5124091,\"cmax\":84.6138031,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666672\",\"rgba(70,19,97,1)\"],[\"0.0833333333333345\",\"rgba(72,32,111,1)\"],[\"0.125000000000002\",\"rgba(71,45,122,1)\"],[\"0.166666666666669\",\"rgba(68,58,128,1)\"],[\"0.208333333333336\",\"rgba(64,70,135,1)\"],[\"0.249999999999997\",\"rgba(60,82,138,1)\"],[\"0.291666666666664\",\"rgba(56,93,140,1)\"],[\"0.333333333333331\",\"rgba(49,104,142,1)\"],[\"0.374999999999998\",\"rgba(46,114,142,1)\"],[\"0.416666666666666\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333334\",\"rgba(39,164,133,1)\"],[\"0.625000000000002\",\"rgba(47,174,127,1)\"],[\"0.666666666666669\",\"rgba(53,183,121,1)\"],[\"0.708333333333336\",\"rgba(79,191,110,1)\"],[\"0.750000000000003\",\"rgba(98,199,98,1)\"],[\"0.791666666666664\",\"rgba(119,207,85,1)\"],[\"0.833333333333331\",\"rgba(147,214,70,1)\"],[\"0.874999999999998\",\"rgba(172,220,52,1)\"],[\"0.916666666666666\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"color\":[82.5124091,82.5301652,82.5313851,82.5396958,82.5406203,82.5474305,82.5509614,82.568315,82.5730545,82.5890701,82.6059165,82.6113472,82.6179329,82.6347573,82.6624367,82.6903612,82.6917137,82.7149749,82.727191,82.7310548,82.7431975,82.7834778,82.8315184,82.9064498,82.9607202,82.9930764,83.0443854,83.1455025,84.606839,84.6138031],\"size\":5,\"line\":{\"colorbar\":{\"title\":\"\",\"ticklen\":2},\"cmin\":82.5124091,\"cmax\":84.6138031,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666672\",\"rgba(70,19,97,1)\"],[\"0.0833333333333345\",\"rgba(72,32,111,1)\"],[\"0.125000000000002\",\"rgba(71,45,122,1)\"],[\"0.166666666666669\",\"rgba(68,58,128,1)\"],[\"0.208333333333336\",\"rgba(64,70,135,1)\"],[\"0.249999999999997\",\"rgba(60,82,138,1)\"],[\"0.291666666666664\",\"rgba(56,93,140,1)\"],[\"0.333333333333331\",\"rgba(49,104,142,1)\"],[\"0.374999999999998\",\"rgba(46,114,142,1)\"],[\"0.416666666666666\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333334\",\"rgba(39,164,133,1)\"],[\"0.625000000000002\",\"rgba(47,174,127,1)\"],[\"0.666666666666669\",\"rgba(53,183,121,1)\"],[\"0.708333333333336\",\"rgba(79,191,110,1)\"],[\"0.750000000000003\",\"rgba(98,199,98,1)\"],[\"0.791666666666664\",\"rgba(119,207,85,1)\"],[\"0.833333333333331\",\"rgba(147,214,70,1)\"],[\"0.874999999999998\",\"rgba(172,220,52,1)\"],[\"0.916666666666666\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"color\":[82.5124091,82.5301652,82.5313851,82.5396958,82.5406203,82.5474305,82.5509614,82.568315,82.5730545,82.5890701,82.6059165,82.6113472,82.6179329,82.6347573,82.6624367,82.6903612,82.6917137,82.7149749,82.727191,82.7310548,82.7431975,82.7834778,82.8315184,82.9064498,82.9607202,82.9930764,83.0443854,83.1455025,84.606839,84.6138031]}},\"type\":\"scatter3d\",\"mode\":\"markers\",\"frame\":null},{\"x\":[1,50],\"y\":[1,15],\"type\":\"scatter3d\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"none\",\"showlegend\":false,\"marker\":{\"colorbar\":{\"title\":\"test_rmse_mean\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"cmin\":82.5124091,\"cmax\":84.6138031,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666672\",\"rgba(70,19,97,1)\"],[\"0.0833333333333345\",\"rgba(72,32,111,1)\"],[\"0.125000000000002\",\"rgba(71,45,122,1)\"],[\"0.166666666666669\",\"rgba(68,58,128,1)\"],[\"0.208333333333336\",\"rgba(64,70,135,1)\"],[\"0.249999999999997\",\"rgba(60,82,138,1)\"],[\"0.291666666666664\",\"rgba(56,93,140,1)\"],[\"0.333333333333331\",\"rgba(49,104,142,1)\"],[\"0.374999999999998\",\"rgba(46,114,142,1)\"],[\"0.416666666666666\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333334\",\"rgba(39,164,133,1)\"],[\"0.625000000000002\",\"rgba(47,174,127,1)\"],[\"0.666666666666669\",\"rgba(53,183,121,1)\"],[\"0.708333333333336\",\"rgba(79,191,110,1)\"],[\"0.750000000000003\",\"rgba(98,199,98,1)\"],[\"0.791666666666664\",\"rgba(119,207,85,1)\"],[\"0.833333333333331\",\"rgba(147,214,70,1)\"],[\"0.874999999999998\",\"rgba(172,220,52,1)\"],[\"0.916666666666666\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":true,\"color\":[82.5124091,84.6138031],\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"z\":[82.5124091,84.6138031],\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  476         77.7006         0.0998        82.5124        0.6930\n 2:  164         76.2352         0.1608        82.5302        0.6939\n 3:  176         76.5310         0.1472        82.5314        0.7656\n 4:  386         76.8895         0.0762        82.5397        0.7031\n 5:  353         77.3357         0.1209        82.5406        0.7410\n 6:  841         78.0260         0.0806        82.5474        0.7158\n 7:  772         78.1773         0.0749        82.5510        0.5863\n 8:  180         76.7896         0.0835        82.5683        0.4212\n 9:  765         77.9577         0.0949        82.5731        0.8062\n10:  218         76.6201         0.0898        82.5891        0.6832\n    min_child_weight max_depth\n 1:               31         6\n 2:               50        10\n 3:               33         9\n 4:               39         7\n 5:               47         7\n 6:               41         5\n 7:               31         5\n 8:               42         9\n 9:               18         5\n10:               18         8\n\nWithout any gamma specification, the best min_child_weight value was 31 and the best max_depth was 6. They will be retained for the gamma tuning process.\nRMSE/SD = 82.5124/0.6930\nFollowup Gamma Tuning\n\n    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  533         77.3554         0.0682        82.5224        0.5267\n 2:  469         77.7686         0.0927        82.5352        0.8634\n 3:  471         77.7354         0.0776        82.5378        0.4401\n 4:  524         77.4174         0.0992        82.5383        0.6807\n 5:  499         77.5734         0.0750        82.5462        0.8300\n 6:  517         77.4582         0.0884        82.5475        0.7874\n 7:  524         77.3996         0.0529        82.5575        0.5187\n 8:  514         77.4428         0.1058        82.5591        0.4798\n 9:  460         77.8339         0.0813        82.5609        0.5974\n10:  473         77.7356         0.0656        82.5616        0.5277\n    eta gamma min_child_weight max_depth\n 1: 0.1     5               31         6\n 2: 0.1    80               31         6\n 3: 0.1    45               31         6\n 4: 0.1    50               31         6\n 5: 0.1    75               31         6\n 6: 0.1    20               31         6\n 7: 0.1     0               31         6\n 8: 0.1    25               31         6\n 9: 0.1    35               31         6\n10: 0.1    10               31         6\n\n\nThe best RMSE was obtained with a gamma value of 5. Thus a narrower grid search was conducted around this value.\nFine Tuning Gamma\n\n    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  483         77.6636         0.0682        82.5199        0.5321\n 2:  580         77.0910         0.0922        82.5308        0.7158\n 3:  526         77.4045         0.0615        82.5482        0.5523\n 4:  530         77.3647         0.0591        82.5531        0.7015\n 5:  561         77.1607         0.0504        82.5531        0.5370\n 6:  505         77.5384         0.1148        82.5568        0.7819\n 7:  524         77.3996         0.0529        82.5575        0.5187\n 8:  475         77.7281         0.0901        82.5679        0.6583\n 9:  511         77.4975         0.1031        82.5682        0.6308\n10:  498         77.6087         0.0835        82.5774        0.5429\n    eta gamma min_child_weight max_depth\n 1: 0.1     1               31         6\n 2: 0.1     8               31         6\n 3: 0.1     4               31         6\n 4: 0.1     9               31         6\n 5: 0.1     3               31         6\n 6: 0.1    10               31         6\n 7: 0.1     0               31         6\n 8: 0.1     6               31         6\n 9: 0.1     2               31         6\n10: 0.1     5               31         6\n\n\nAfter fine tuning gamma, the best RMSE was obtained using a value of 1. However, RMSE values did not appear to converge towards a particular value, as illustrated in the plot. Consequently, some caution is warranted for these hyperparameter values.\nBest RMSE/SD = 82.5199/0.5321\nEvaluating Approaches\nApproach #1: RMSE/SD = 82.5145/0.4865 Approach #2: RMSE/SD = 82.5199/0.5321\nTuning gamma first, followed by the tree hyperparameters yielded better RMSE during the cross validations. Thus, the hyperparameter values generated through the first tuning approach were retained.\nUpdated model summary:\ngamma = 12\nmax_depth = 6\nmin_child_weight = 10\nTune Stochastic Parameters\nAfter tuning loss reduction and the tree hyperparameters, the stochastic parameters were tuned to identify the best subsampling of columns and cases.\n\n\n\nSpecify Model\n\n\nsample_mods <- map2(grid$mtry, grid$sample_size, ~{\n  xgb.cv(\n    data = train_x,\n    label = train_y,\n    nrounds = 5000,\n    objective = \"reg:squarederror\",\n    early_stopping_rounds = 50, \n    nfold = 10,\n    verbose = 1,\n    params = list( \n      eta = 0.1,\n      gamma = 12,\n      max_depth = 6,\n      min_child_weight = 10,\n      colsample_bytree = .x,\n      subsample = .y,\n      nthread = 24\n    ) \n  )  \n}) \n\n\n\nTuning Results\n\n    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  180         76.8111         0.1001        82.4945        0.4857\n 2:  162         77.0779         0.1225        82.5165        0.7459\n 3:  169         76.9934         0.0828        82.5251        0.5528\n 4:  176         77.1740         0.1421        82.5602        0.6855\n 5:  168         77.0995         0.1517        82.5628        0.7122\n 6:  190         76.7031         0.0754        82.5678        0.2103\n 7:  164         77.2467         0.0799        82.5744        0.4960\n 8:  154         77.5365         0.0981        82.5795        0.5072\n 9:  166         77.4868         0.1162        82.5908        0.5536\n10:  178         77.4601         0.0839        82.5981        0.4447\n    gamma colsample_bytree subsample\n 1:    10           0.7568    0.9742\n 2:    10           0.8865    0.9124\n 3:    10           0.8919    0.8517\n 4:    10           0.4216    0.9423\n 5:    10           0.7514    0.8682\n 6:    10           0.6432    0.9851\n 7:    10           0.5676    0.9561\n 8:    10           0.8054    0.7719\n 9:    10           0.4541    0.8728\n10:    10           0.4216    0.8013\n\nBest values for colsample_bytree and subsample appear to be around values >.70. A narrower grid search was completed and is summarized below. Notably, gamma was mistakenly specified as 10 (instead of 12) during this tuning process. However, this wasn‚Äôt expected to dramatically shift the tenable range of best stochastic parameter values during fine tuning.\nFine Tuning Results\n\n\n{\"x\":{\"visdat\":{\"efc37bbcc0d8\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"efc37bbcc0d8\",\"attrs\":{\"efc37bbcc0d8\":{\"x\":{},\"y\":{},\"z\":{},\"marker\":{\"size\":5},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"colsample_bytree\"},\"yaxis\":{\"title\":\"subsample\"},\"zaxis\":{\"title\":\"test_rmse_mean\"}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[0.891891891891892,0.972972972972973,0.983783783783784,0.87027027027027,1,0.724324324324324,0.783783783783784,0.783783783783784,0.897297297297297,0.951351351351351,0.810810810810811,0.702702702702703,0.989189189189189,0.881081081081081,0.718918918918919],\"y\":[0.927007813049905,0.923192792285493,0.983015414936299,0.988202998521855,0.871605546561554,0.995889350320265,0.948194551981418,0.822707116210319,0.853748152319279,0.805553600337862,0.874723727739847,0.842035616245513,0.838072781023439,0.806630534243683,0.912923206869853],\"z\":[82.5002296,82.5245126,82.5343529,82.5375488,82.5563118,82.5563462,82.567076,82.571678,82.5793435,82.5839614,82.5863265,82.597895,82.5998147,82.6007409,82.608178],\"marker\":{\"colorbar\":{\"title\":\"test_rmse_mean\",\"ticklen\":2},\"cmin\":82.5002296,\"cmax\":82.608178,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666008\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125000000000066\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333268\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666732\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.374999999999934\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333399\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666601\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625000000000066\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333268\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666732\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.874999999999934\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333399\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"color\":[82.5002296,82.5245126,82.5343529,82.5375488,82.5563118,82.5563462,82.567076,82.571678,82.5793435,82.5839614,82.5863265,82.597895,82.5998147,82.6007409,82.608178],\"size\":5,\"line\":{\"colorbar\":{\"title\":\"\",\"ticklen\":2},\"cmin\":82.5002296,\"cmax\":82.608178,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666008\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125000000000066\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333268\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666732\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.374999999999934\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333399\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666601\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625000000000066\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333268\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666732\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.874999999999934\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333399\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"color\":[82.5002296,82.5245126,82.5343529,82.5375488,82.5563118,82.5563462,82.567076,82.571678,82.5793435,82.5839614,82.5863265,82.597895,82.5998147,82.6007409,82.608178]}},\"type\":\"scatter3d\",\"mode\":\"markers\",\"frame\":null},{\"x\":[0.702702702702703,1],\"y\":[0.805553600337862,0.995889350320265],\"type\":\"scatter3d\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"none\",\"showlegend\":false,\"marker\":{\"colorbar\":{\"title\":\"test_rmse_mean\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"cmin\":82.5002296,\"cmax\":82.608178,\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666008\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125000000000066\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333268\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666732\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.374999999999934\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333399\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666601\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625000000000066\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333268\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666732\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.874999999999934\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333399\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":true,\"color\":[82.5002296,82.608178],\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"z\":[82.5002296,82.608178],\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}    iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n 1:  201         76.2962         0.1157        82.5002        0.7741\n 2:  164         76.9645         0.0987        82.5245        0.3507\n 3:  202         76.2556         0.0651        82.5344        0.4445\n 4:  201         76.3411         0.1021        82.5375        0.7820\n 5:  171         76.8405         0.1879        82.5563        1.0331\n 6:  204         76.4118         0.0689        82.5563        0.4480\n 7:  182         76.6834         0.0717        82.5671        0.5603\n 8:  152         77.5125         0.0959        82.5717        0.7425\n 9:  162         77.1778         0.0651        82.5793        0.4789\n10:  143         77.6607         0.1106        82.5840        0.8543\n    gamma colsample_bytree subsample\n 1:    12           0.8919    0.9270\n 2:    12           0.9730    0.9232\n 3:    12           0.9838    0.9830\n 4:    12           0.8703    0.9882\n 5:    12           1.0000    0.8716\n 6:    12           0.7243    0.9959\n 7:    12           0.7838    0.9482\n 8:    12           0.7838    0.8227\n 9:    12           0.8973    0.8537\n10:    12           0.9514    0.8056\n\nBest value of colsample_bytree = .892\nBest value of subsample = .927\nUpdated model summary:\ngamma = 12\nmax_depth = 6\nmin_child_weight = 10\ncolsample_bytree = .892\nsubsample = .927\nRetune Learning Rate\nSpecify Model\n\n\nr <- seq(0.0001, 0.1, length.out = 20)\n\nlr_mods <- map(lr, function(learn_rate) {\n  xgb.cv(\n    data = train_x,\n    label = train_y,\n    nrounds = 5000,\n    objective = \"reg:squarederror\",\n    early_stopping_rounds = 50,\n    nfold = 10,\n    verbose = 0,\n    params = list(\n      eta = learn_rate,\n      gamma = 12,\n      max_depth = 6,\n      min_child_weight = 10,\n      colsample_bytree = 0.8918919,\n      subsample = 0.9270078,\n      nthread = 24\n    )\n  )\n})\n\n\n\nThe learning rate could not be re-tuned under the time constraints, so it was lowered to .04, which was identified to be the best learning rate during tuning of early models.\nTune Number of Trees\n\n\nbst <- xgb.cv(\n  data = train_x,\n  label = train_y,\n  nrounds = 10000,\n  objective = \"reg:squarederror\",\n  early_stopping_rounds = 50,\n  nfold = 10,\n  verbose = 1,\n  params = list(\n    eta = .04,\n  gamma = 12,\n  max_depth = 6,\n  min_child_weight = 10,\n  colsample_bytree = 0.8918919,\n  subsample = 0.9270078,\n  nthread = 24))\n\n\n\n\n   iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n1: 1119        77.19118     0.05822473       82.45213     0.4973091\n\nBest iteration was 1119. Only 1119 trees will be specified in final fit.\nFinal Fit Statistics\nGenerate Final Fit\n\n\nfinal_mod <- xgboost(\n  data = train_x,\n  label = train_y,\n  nrounds = 1119,\n  objective = \"reg:squarederror\",\n  verbose = 1,\n  params = list(\n    eta = .04,\n  gamma = 12,\n  max_depth = 6,\n  min_child_weight = 10,\n  colsample_bytree = 0.8918919,\n  subsample = 0.9270078,\n  nthread = 24))\n\n\n\nFit to test set\n\n\nbaked_test <- prep(rec) %>%\n  bake(test)\n\ntest_x = data.matrix(baked_test[, -73])\n\npred <- predict(final_mod, as.matrix(test_x))\nactual <- baked_test$score\n\nMetrics::rmse(actual, pred)\n\n\n\nFinal Fit Results\n\n[1] 78.86593\n\nAfter tuning hyperparameters, reducing the learning rate, and determining the number of trees, the final RMSE on the test split is 78.86593. This was only slightly higher than the RMSE calculated during the final fit to the training data, which was 77.51970.\nThis model was submitted 20 minutes late to the Kaggle competition, but received a RMSE of 81.65183 on the 30% test set for the public leaderboard, and an RMSE of 82.07486 for the private leaderboard.\nFeature Importance Plot of Final Model (Top 35)\n\n\n\n\n\n\n",
    "preview": "posts/11-29-20_Chris/ML_models_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2020-12-07T18:09:46-08:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 768
  },
  {
    "path": "posts/11-29-20_data_prep_&_description_AY/",
    "title": "Data preparation and exploration",
    "description": "Here we joined our datasets and explored through visualization.",
    "author": [
      {
        "name": "Asha",
        "url": {}
      }
    ],
    "date": "2020-11-28",
    "categories": [],
    "contents": "\r\nTable of Contents\r\n1. Packages\r\n2. Joining the datasets\r\n3.Data Exploration\r\n1. Packages\r\nFor the purpose of data loading and cleaning, we are using following packages in R: {tidyverse}, {here}, {rio}, and {skimr}\r\n2. Joining the datasets\r\nFor the purpose of demonstration, we will be using 1% of the data with sample_frac() to keep computing time low. All our datasets have school ids which we used as key to join the datasets.\r\nAfter loading our three datasets, we joined them together to make one cohesive dataset, to be used for ML modeling. After joining, the dataset contains student-level variables (e.g.¬†gender, ethnicity, enrollement in special education, etc.) as well as district-level variables ( school longitude and latitude, proportion of free and reduced lunch, etc.). All of these variables will be used in our ML models to predict student score in the statewide assessment. Here is the preview of our final dataset, ready to be used for ML modeling.\r\n\r\nTable 1: Data summary\r\nName\r\ndata\r\nNumber of rows\r\n1894\r\nNumber of columns\r\n88\r\n_______________________\r\n\r\nColumn type frequency:\r\n\r\ncharacter\r\n5\r\nfactor\r\n28\r\nlogical\r\n1\r\nnumeric\r\n54\r\n________________________\r\n\r\nGroup variables\r\n\r\nVariable type: character\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmin\r\nmax\r\nempty\r\nn_unique\r\nwhitespace\r\ncounty\r\n28\r\n0.99\r\n11\r\n17\r\n0\r\n34\r\n0\r\nlocale\r\n28\r\n0.99\r\n14\r\n19\r\n0\r\n12\r\n0\r\ntitle1_status\r\n28\r\n0.99\r\n36\r\n47\r\n0\r\n3\r\n0\r\nlea_name\r\n30\r\n0.98\r\n20\r\n43\r\n0\r\n145\r\n0\r\nsch_name\r\n28\r\n0.99\r\n8\r\n60\r\n0\r\n695\r\n0\r\nVariable type: factor\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nordered\r\nn_unique\r\ntop_counts\r\ngndr\r\n0\r\n1.00\r\nFALSE\r\n2\r\nM: 967, F: 927\r\nethnic_cd\r\n0\r\n1.00\r\nFALSE\r\n7\r\nW: 1183, H: 441, M: 103, A: 79\r\ntst_bnch\r\n0\r\n1.00\r\nFALSE\r\n6\r\n2B: 347, G4: 319, G6: 316, 3B: 307\r\ntst_dt\r\n0\r\n1.00\r\nFALSE\r\n52\r\n5/2: 160, 5/2: 138, 5/1: 125, 5/2: 114\r\nmigrant_ed_fg\r\n0\r\n1.00\r\nFALSE\r\n2\r\nN: 1848, Y: 46\r\nind_ed_fg\r\n1\r\n1.00\r\nFALSE\r\n2\r\nN: 1872, Y: 21, y: 0\r\nsp_ed_fg\r\n1\r\n1.00\r\nFALSE\r\n2\r\nN: 1652, Y: 241\r\ntag_ed_fg\r\n6\r\n1.00\r\nFALSE\r\n2\r\nN: 1791, Y: 97\r\necon_dsvntg\r\n6\r\n1.00\r\nFALSE\r\n2\r\nY: 1094, N: 794\r\nayp_lep\r\n1534\r\n0.19\r\nFALSE\r\n7\r\nF: 165, Y: 69, E: 64, N: 29\r\nstay_in_dist\r\n6\r\n1.00\r\nFALSE\r\n2\r\nY: 1845, N: 43\r\nstay_in_schl\r\n6\r\n1.00\r\nFALSE\r\n2\r\nY: 1830, N: 58\r\ndist_sped\r\n6\r\n1.00\r\nFALSE\r\n2\r\nN: 1867, Y: 21\r\ntrgt_assist_fg\r\n6\r\n1.00\r\nFALSE\r\n3\r\nN: 1812, Y: 74, y: 2\r\nayp_dist_partic\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1888, N: 6\r\nayp_schl_partic\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1867, N: 27\r\nayp_dist_prfrm\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1842, N: 52\r\nayp_schl_prfrm\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1808, N: 86\r\nrc_dist_partic\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1888, N: 6\r\nrc_schl_partic\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1867, N: 27\r\nrc_dist_prfrm\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1842, N: 52\r\nrc_schl_prfrm\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1808, N: 86\r\nlang_cd\r\n1842\r\n0.03\r\nFALSE\r\n1\r\nS: 52\r\ntst_atmpt_fg\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1886, P: 8\r\ngrp_rpt_dist_partic\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1888, N: 6\r\ngrp_rpt_schl_partic\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1867, N: 27\r\ngrp_rpt_dist_prfrm\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1882, N: 12\r\ngrp_rpt_schl_prfrm\r\n0\r\n1.00\r\nFALSE\r\n2\r\nY: 1861, N: 33\r\nVariable type: logical\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\ncount\r\ncalc_admn_cd\r\n1894\r\n0\r\nNaN\r\n:\r\nVariable type: numeric\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\nsd\r\nhist\r\nid\r\n0\r\n1.00\r\n1.273822e+05\r\n73162.85\r\n‚ñá‚ñá‚ñá‚ñá‚ñá\r\nattnd_dist_inst_id\r\n0\r\n1.00\r\n2.127740e+03\r\n212.96\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nattnd_schl_inst_id\r\n0\r\n1.00\r\n1.400890e+03\r\n1393.20\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÅ\r\nenrl_grd\r\n0\r\n1.00\r\n5.490000e+00\r\n1.68\r\n‚ñá‚ñÖ‚ñÖ‚ñÉ‚ñÉ\r\npartic_dist_inst_id\r\n6\r\n1.00\r\n2.131510e+03\r\n225.53\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\npartic_schl_inst_id\r\n6\r\n1.00\r\n1.403160e+03\r\n1394.28\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÅ\r\nscore\r\n0\r\n1.00\r\n2.500430e+03\r\n119.82\r\n‚ñÅ‚ñÅ‚ñá‚ñÉ‚ñÅ\r\nncessch\r\n26\r\n0.99\r\n4.106893e+11\r\n395453731.73\r\n‚ñÜ‚ñÖ‚ñÖ‚ñá‚ñÉ\r\nlat\r\n30\r\n0.98\r\n4.475000e+01\r\n1.04\r\n‚ñÇ‚ñÅ‚ñÇ‚ñÖ‚ñá\r\nlon\r\n30\r\n0.98\r\n-1.225200e+02\r\n1.17\r\n‚ñÖ‚ñá‚ñÅ‚ñÅ‚ñÅ\r\nncesag\r\n28\r\n0.99\r\n4.106891e+06\r\n3956.50\r\n‚ñÜ‚ñÖ‚ñÖ‚ñá‚ñÉ\r\nzip\r\n28\r\n0.99\r\n9.731347e+04\r\n232.97\r\n‚ñá‚ñá‚ñÜ‚ñÅ‚ñÇ\r\ntotal_n\r\n28\r\n0.99\r\n5.721300e+02\r\n357.46\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nfr_lnch_n\r\n75\r\n0.96\r\n2.310900e+02\r\n148.02\r\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nred_lnch_n\r\n75\r\n0.96\r\n4.091000e+01\r\n25.11\r\n‚ñÜ‚ñá‚ñÉ‚ñÇ‚ñÅ\r\npupil_tch_ratio\r\n28\r\n0.99\r\n2.026000e+01\r\n3.60\r\n‚ñá‚ñá‚ñÅ‚ñÅ‚ñÅ\r\nipr_est\r\n28\r\n0.99\r\n3.220900e+02\r\n155.65\r\n‚ñá‚ñÜ‚ñÇ‚ñÅ‚ñÅ\r\nleaid\r\n28\r\n0.99\r\n4.106891e+06\r\n3956.50\r\n‚ñÜ‚ñÖ‚ñÖ‚ñá‚ñÉ\r\nst_schid\r\n28\r\n0.99\r\n1.388760e+03\r\n1387.95\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÅ\r\nlea_cwiftest\r\n30\r\n0.98\r\n9.400000e-01\r\n0.07\r\n‚ñÅ‚ñÇ‚ñá‚ñÇ‚ñÜ\r\np_american_indian_alaska_native\r\n28\r\n0.99\r\n1.000000e-02\r\n0.04\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_asian\r\n28\r\n0.99\r\n4.000000e-02\r\n0.07\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_native_hawaiian_pacific_islander\r\n28\r\n0.99\r\n1.000000e-02\r\n0.01\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_black_african_american\r\n28\r\n0.99\r\n2.000000e-02\r\n0.04\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_hispanic_latino\r\n28\r\n0.99\r\n2.500000e-01\r\n0.19\r\n‚ñá‚ñÖ‚ñÇ‚ñÅ‚ñÅ\r\np_white\r\n28\r\n0.99\r\n6.100000e-01\r\n0.20\r\n‚ñÅ‚ñÉ‚ñÜ‚ñá‚ñá\r\np_multiracial\r\n28\r\n0.99\r\n7.000000e-02\r\n0.03\r\n‚ñá‚ñÜ‚ñÅ‚ñÅ‚ñÅ\r\nfr_lnch_prop\r\n75\r\n0.96\r\n4.400000e-01\r\n0.21\r\n‚ñÖ‚ñá‚ñá‚ñÜ‚ñÇ\r\nred_lnch_prop\r\n75\r\n0.96\r\n8.000000e-02\r\n0.03\r\n‚ñÉ‚ñá‚ñÉ‚ñÅ‚ñÅ\r\npercent_level_4\r\n31\r\n0.98\r\n2.211000e+01\r\n13.36\r\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ\r\npercent_level_3\r\n31\r\n0.98\r\n3.123000e+01\r\n9.00\r\n‚ñÇ‚ñÜ‚ñá‚ñÅ‚ñÅ\r\npercent_level_2\r\n31\r\n0.98\r\n2.268000e+01\r\n7.09\r\n‚ñÅ‚ñÜ‚ñá‚ñÅ‚ñÅ\r\npercent_level_1\r\n31\r\n0.98\r\n2.399000e+01\r\n13.48\r\n‚ñÖ‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nsch_percent_level_4\r\n28\r\n0.99\r\n2.243000e+01\r\n12.46\r\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nsch_percent_level_3\r\n28\r\n0.99\r\n3.118000e+01\r\n6.83\r\n‚ñÅ‚ñÇ‚ñá‚ñá‚ñÇ\r\nsch_percent_level_2\r\n28\r\n0.99\r\n2.259000e+01\r\n5.31\r\n‚ñÅ‚ñÉ‚ñá‚ñá‚ñÅ\r\nsch_percent_level_1\r\n28\r\n0.99\r\n2.380000e+01\r\n12.05\r\n‚ñÖ‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nunder_25\r\n44\r\n0.98\r\n2.100000e-01\r\n0.06\r\n‚ñÉ‚ñá‚ñÖ‚ñÅ‚ñÅ\r\nunder_50\r\n44\r\n0.98\r\n2.300000e-01\r\n0.06\r\n‚ñÇ‚ñÜ‚ñá‚ñÜ‚ñÇ\r\nunder_75\r\n44\r\n0.98\r\n1.600000e-01\r\n0.03\r\n‚ñÇ‚ñá‚ñÅ‚ñÅ‚ñÅ\r\nunder_100\r\n44\r\n0.98\r\n1.200000e-01\r\n0.02\r\n‚ñÅ‚ñÅ‚ñá‚ñÉ‚ñÅ\r\nunder_200\r\n44\r\n0.98\r\n2.000000e-01\r\n0.07\r\n‚ñÅ‚ñÜ‚ñÜ‚ñá‚ñÅ\r\nover_200\r\n44\r\n0.98\r\n7.000000e-02\r\n0.08\r\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÅ\r\npercent_less_than_9th_grade\r\n40\r\n0.98\r\n4.040000e+00\r\n3.37\r\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\r\npercent_high_school_graduate_or_higher\r\n40\r\n0.98\r\n8.972000e+01\r\n5.79\r\n‚ñÅ‚ñÅ‚ñÇ‚ñá‚ñÖ\r\npercent_bachelors_degree_or_higher\r\n40\r\n0.98\r\n3.122000e+01\r\n16.15\r\n‚ñÉ‚ñá‚ñÉ‚ñÇ‚ñÅ\r\npercent_associates_degree\r\n40\r\n0.98\r\n8.780000e+00\r\n1.99\r\n‚ñÇ‚ñá‚ñá‚ñÅ‚ñÅ\r\npercent_graduate_or_professional_degree\r\n40\r\n0.98\r\n1.171000e+01\r\n7.87\r\n‚ñá‚ñÜ‚ñÉ‚ñÅ‚ñÅ\r\npercent_bachelors_degree\r\n40\r\n0.98\r\n1.815000e+01\r\n8.52\r\n‚ñÇ‚ñá‚ñÉ‚ñÉ‚ñÇ\r\npercent_high_school_graduate\r\n40\r\n0.98\r\n2.511000e+01\r\n7.67\r\n‚ñÇ‚ñÉ‚ñá‚ñÇ‚ñÅ\r\npercent_9th_to_12th_grade_no_diploma\r\n40\r\n0.98\r\n6.900000e+00\r\n3.42\r\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÅ\r\npercent_some_college\r\n40\r\n0.98\r\n2.676000e+01\r\n4.37\r\n‚ñÅ‚ñÉ‚ñá‚ñá‚ñÅ\r\nmedian_income\r\n28\r\n0.99\r\n2.812101e+04\r\n4487.40\r\n‚ñÇ‚ñá‚ñÇ‚ñÉ‚ñÜ\r\nmedian_rent\r\n28\r\n0.99\r\n9.835000e+02\r\n153.33\r\n‚ñÅ‚ñÇ‚ñá‚ñÇ‚ñá\r\n\r\n3.Data Exploration\r\nCorrelation: Figure 1 displays significant (p < 0.05) correlation between numeric variables. Red dots show significant pearson‚Äôs correlation coefficient between 0 to 1 and white dots show significant coefficient between -1 to 0. Blank spaces are not significant.\r\n\r\n\r\n\r\nWe looked if pupil-teacher ratio and score differ by county.\r\n\r\n\r\n\r\nWe explored adult qualification by economic disadvantage and grade.\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-07T16:53:52-08:00",
    "input_file": {}
  },
  {
    "path": "posts/11-29-20_ML_models_AY/",
    "title": "Linear Regression and Penalized Regression Model (Lasso)",
    "description": "Our aim is to predict the score on statewide testing assessment using other variables in the dataset. Let's see how linear and lasso regression perform.",
    "author": [
      {
        "name": "Asha",
        "url": {}
      }
    ],
    "date": "2020-11-28",
    "categories": [],
    "contents": "\r\nTable of Contents\r\n1.Splitting and resampling1a. Splitting\r\n1b. Resampling\r\n\r\n2.Pre-processing\r\n3. Linear model\r\n1.Splitting and resampling\r\nData splitting and resampling is a method to ensure that predictive performance of ML model is unbiased.\r\n1a. Splitting\r\nWe will split our dataset into training and testing set. The training data will be used to fit our model and tune its parameters, whereas the testing data will be used to evaluate our final model‚Äôs performance.\r\nWe will use initial_split() function from the rsample package which creates a split object. The split object d_split, tells how many observations we have in our training and testing set (trainin set = 75% & testing set = 25%).\r\n\r\n\r\nset.seed(3000)\r\n# Create split object specifying (75%) and testing (25%)\r\n\r\ndata_split <- initial_split(data, prop = 3/4) \r\n\r\ndata_split\r\n\r\n<Analysis/Assess/Total>\r\n<1421/473/1894>\r\n\r\nWe will extract the training and testing set from the split object, d_split by using the training() and testing() functions.\r\n\r\n\r\n# Extract training and testing set\r\nset.seed(3000)\r\n\r\ndata_train <- training(data_split)  # Our training dataset has 1421 observations.\r\n\r\ndata_test <- testing(data_split)    # Our test dataset has 473 observations.\r\n\r\n1b. Resampling\r\nAt some point, ML models require parameters tuning (adjustment). In order to prepare for tuning, we resample our data. Resampling reduces bias from over-fitting the data. There are several methods to resample the data and the two most effective and frequently used are 10-fold cross validation and bootstrapping. In our project, we‚Äôll resample our data using vfold_cv(). This function outputs k-fold cross-validated versions of our training data, where k = number of time we resample.\r\n\r\n\r\n# Resample the data with 10-fold cross validation.\r\nset.seed(3000)\r\ncv <- vfold_cv(data_train)\r\n\r\n2.Pre-processing\r\nPreprocessing is a way of converting data from the raw form to a more usable form for the ML modeling purpose. The pre-processing involves defining roles of variables using role-specifying functions such as all_numeric(), all_predictors() as arguments to pre-processing steps. Pre-processing also involves steps such as imputation (step_medianimpute), rescaling (step_scale), standardizing (step_normalize), PCA (step_pca) and creating dummy variables (step_dummy). A full list of pre-processing can be found here.\r\nWe will use recipe() function to indicate our outcome and predictor variables in our recipe. We will use ~. to indicate that we are using all variables to predict the outcome variable score. All recipe takes from the data object at this point is the names and roles of the outcome and predictor variables. We will apply this recipe to specific dataset later. Therefore, when we print summary of object, rec, it shows numbers of predictor variables have been specified. It doen‚Äôt actually apply the predictors yet. We will use same receipe throughout this post.\r\n\r\n\r\nset.seed(3000)\r\n\r\nrec <- recipe(score ~ ., data_train) %>% \r\n  step_mutate(tst_dt = as.numeric(lubridate::\r\n                                    mdy_hms(tst_dt))) %>% # convert `test date` variable to a date \r\n  update_role(contains(\"id\"), ncessch, new_role = \"id vars\") %>% # declare ID variables\r\n  step_nzv(all_predictors(), freq_cut = 0, unique_cut = 0) %>% # remove variables with zero variances\r\n  step_novel(all_nominal()) %>% # prepares test data to handle previously unseen factor levels \r\n  step_unknown(all_nominal()) %>% # categorizes missing categorical data (NA's) as `unknown`\r\n  step_medianimpute(all_numeric(), -all_outcomes(), \r\n                    -has_role(\"id vars\"))  %>% # replaces missing numeric observations with the median\r\n  step_dummy(all_nominal(), -has_role(\"id vars\")) %>% # dummy codes categorical variables\r\n  step_nzv(all_predictors(), -starts_with(\"lang_cd\"))\r\n\r\nExtract the pre-processed dataset\r\nTo extract the pre-processed dataset, we can prep() the recipe for our datset then bake() the prepped recipe to extract the pre-processed data.\r\nHowever, in tidymodels we can use workflows() where we don‚Äôt need to prep() or bake() the recipe.\r\n\r\n\r\nprep(rec) #%>%\r\n\r\nData Recipe\r\n\r\nInputs:\r\n\r\n      role #variables\r\n   id vars          8\r\n   outcome          1\r\n predictor         79\r\n\r\nTraining data contained 1421 data points and 1421 incomplete rows. \r\n\r\nOperations:\r\n\r\nVariable mutation for tst_dt [trained]\r\nSparse, unbalanced variable filter removed calc_admn_cd, lang_cd [trained]\r\nNovel factor level assignment for gndr, ethnic_cd, ... [trained]\r\nUnknown factor level assignment for gndr, ethnic_cd, ... [trained]\r\nMedian Imputation for enrl_grd, tst_dt, lat, lon, ... [trained]\r\nDummy variables from gndr, ethnic_cd, tst_bnch, ... [trained]\r\nSparse, unbalanced variable filter removed gndr_new, ... [trained]\r\n\r\n # bake(data_train)   # We are using workflow so no need to bake.\r\n\r\nThe next step is to specify our ML models, using the parsnip package. To specify the model, there are four primary components: model type, arguments, engine, and mode.\r\n3. Linear model\r\n\r\n\r\nset.seed(3000)\r\n\r\n# Specify the model\r\n\r\nmod_linear <- linear_reg() %>%\r\n  set_engine(\"lm\") %>%  # engine for linear regression\r\n  set_mode(\"regression\")  # regression for continous outcome varaible.\r\n\r\n# Workflow\r\nlm_wf <- workflow() %>% # set the workflow\r\n  add_recipe(rec) %>% # add recipe\r\n  add_model(mod_linear) # add model\r\n  \r\n\r\n# Fit the linear model\r\nmod_linear_fit<- fit_resamples(\r\n  mod_linear,\r\n  preprocessor = rec,\r\n  resamples = cv,\r\n  metrics = metric_set(rmse),\r\n  control = control_resamples(verbose = TRUE,\r\n                                    save_pred = TRUE))\r\n\r\nCollect metrics on linear model\r\n\r\n\r\nset.seed(3000)\r\n\r\nmod_linear_fit %>%\r\n  collect_metrics() %>%\r\n  filter(.metric == \"rmse\") \r\n\r\n# A tibble: 1 x 5\r\n  .metric .estimator  mean     n std_err\r\n  <chr>   <chr>      <dbl> <int>   <dbl>\r\n1 rmse    standard    96.3    10    2.49\r\n\r\n#RMSE = 96.28\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-07T16:53:52-08:00",
    "input_file": {}
  },
  {
    "path": "posts/11-28-20_datasets_AY/",
    "title": "Datasets",
    "description": "Here is the preview of datasets used in our final project.",
    "author": [
      {
        "name": "Asha",
        "url": {}
      }
    ],
    "date": "2020-11-27",
    "categories": [],
    "contents": "\r\nTable of Contents\r\n1. Introduction\r\n2. Statewide testing data (Original dataset)\r\n3. Fall membership report data\r\n4. Bonus Dataset\r\n5. Supplemental small dataset\r\n1. Introduction\r\nFor this project, we collected and joined three structured datasets and one supplemental small dataset only for XG boost model. Datasets are selected on the basis of variables that were correlated with the outcome variable. In our datasets, our outcome variable is children‚Äôs score on the statewide assessment. Please see below for more information on each dataset.\r\n2. Statewide testing data (Original dataset)\r\nStudents in every state across the nation are tested annually in reading and math in grades 3-8. Dataset used in the project are simulated from an actual statewide testing administration across the state of Oregon and the overall distribution are highly similar. Our continous outcome variable is score which is also presented in categorical form as classification. For the project, our models are run to predict the continous score variable. Our data contains other variables of interest (predictors) such as gender, ethnicity, economic disadvange, and location. In our simulated dataset, school ids are real which we used as key to join other datasets. Here is the preview of our statewide testing dataset.\r\n\r\nTable 1: Data summary\r\nName\r\nd\r\nNumber of rows\r\n1894\r\nNumber of columns\r\n39\r\n_______________________\r\n\r\nColumn type frequency:\r\n\r\ncharacter\r\n28\r\nlogical\r\n1\r\nnumeric\r\n10\r\n________________________\r\n\r\nGroup variables\r\n\r\nVariable type: character\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmin\r\nmax\r\nempty\r\nn_unique\r\nwhitespace\r\ngndr\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nethnic_cd\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n7\r\n0\r\ntst_bnch\r\n0\r\n1.00\r\n2\r\n2\r\n0\r\n6\r\n0\r\ntst_dt\r\n0\r\n1.00\r\n16\r\n17\r\n0\r\n48\r\n0\r\nmigrant_ed_fg\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nind_ed_fg\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nsp_ed_fg\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ntag_ed_fg\r\n3\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\necon_dsvntg\r\n4\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nayp_lep\r\n1540\r\n0.19\r\n1\r\n1\r\n0\r\n8\r\n0\r\nstay_in_dist\r\n3\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nstay_in_schl\r\n3\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ndist_sped\r\n3\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ntrgt_assist_fg\r\n3\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nayp_dist_partic\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nayp_schl_partic\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nayp_dist_prfrm\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nayp_schl_prfrm\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nrc_dist_partic\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nrc_schl_partic\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nrc_dist_prfrm\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nrc_schl_prfrm\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nlang_cd\r\n1851\r\n0.02\r\n1\r\n1\r\n0\r\n1\r\n0\r\ntst_atmpt_fg\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ngrp_rpt_dist_partic\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ngrp_rpt_schl_partic\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ngrp_rpt_dist_prfrm\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\ngrp_rpt_schl_prfrm\r\n0\r\n1.00\r\n1\r\n1\r\n0\r\n2\r\n0\r\nVariable type: logical\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\ncount\r\ncalc_admn_cd\r\n1894\r\n0\r\nNaN\r\n:\r\nVariable type: numeric\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\nsd\r\nhist\r\nid\r\n0\r\n1.00\r\n1.267936e+05\r\n72111.86\r\n‚ñá‚ñá‚ñá‚ñá‚ñá\r\nattnd_dist_inst_id\r\n0\r\n1.00\r\n2.116080e+03\r\n188.53\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nattnd_schl_inst_id\r\n0\r\n1.00\r\n1.345800e+03\r\n1388.28\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÅ\r\nenrl_grd\r\n0\r\n1.00\r\n5.440000e+00\r\n1.67\r\n‚ñá‚ñÖ‚ñÉ‚ñÉ‚ñÉ\r\npartic_dist_inst_id\r\n4\r\n1.00\r\n2.116160e+03\r\n188.71\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\npartic_schl_inst_id\r\n4\r\n1.00\r\n1.345210e+03\r\n1386.64\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÅ\r\nscore\r\n0\r\n1.00\r\n2.498910e+03\r\n113.99\r\n‚ñÅ‚ñÇ‚ñá‚ñÖ‚ñÅ\r\nncessch\r\n29\r\n0.98\r\n4.106795e+11\r\n385634091.96\r\n‚ñÜ‚ñÖ‚ñÖ‚ñá‚ñÉ\r\nlat\r\n31\r\n0.98\r\n4.476000e+01\r\n1.00\r\n‚ñÇ‚ñÅ‚ñÉ‚ñÖ‚ñá\r\nlon\r\n31\r\n0.98\r\n-1.224600e+02\r\n1.28\r\n‚ñÜ‚ñá‚ñÅ‚ñÅ‚ñÅ\r\n\r\n3. Fall membership report data\r\nThe Oregon Department for Education (ODE) publicly releases student enrollment reports detailing the number of K-12 students who are enrolled on the first school day in October of each year.This report is known as Fall membership report which contains data on race/ethinicity percentages for schools in Oregon. Here is the preview of our data.\r\n\r\nTable 2: Data summary\r\nName\r\nethnicities\r\nNumber of rows\r\n1459\r\nNumber of columns\r\n9\r\n_______________________\r\n\r\nColumn type frequency:\r\n\r\ncharacter\r\n1\r\nnumeric\r\n8\r\n________________________\r\n\r\nGroup variables\r\n\r\nVariable type: character\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmin\r\nmax\r\nempty\r\nn_unique\r\nwhitespace\r\nsch_name\r\n0\r\n1\r\n8\r\n60\r\n0\r\n1381\r\n0\r\nVariable type: numeric\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\nsd\r\nhist\r\nattnd_schl_inst_id\r\n0\r\n1\r\n1661.26\r\n1558.62\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÇ\r\np_american_indian_alaska_native\r\n0\r\n1\r\n0.02\r\n0.05\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_asian\r\n0\r\n1\r\n0.03\r\n0.05\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_native_hawaiian_pacific_islander\r\n0\r\n1\r\n0.01\r\n0.01\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_black_african_american\r\n0\r\n1\r\n0.02\r\n0.05\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_hispanic_latino\r\n0\r\n1\r\n0.21\r\n0.18\r\n‚ñá‚ñÉ‚ñÅ‚ñÅ‚ñÅ\r\np_white\r\n0\r\n1\r\n0.65\r\n0.22\r\n‚ñÅ‚ñÇ‚ñÉ‚ñá‚ñÖ\r\np_multiracial\r\n0\r\n1\r\n0.06\r\n0.05\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\n\r\n4. Bonus Dataset\r\nWe retrieved another dataset that contains k-12 data collected by zip code, NCES school IDs, State school IDs, and county level. It contains variables that are not present in the statewide testing dataset such as teacher-pupil ratio, percentage of people with high school, no diploma, and higher education. These variables may have effect on our outcome variable (score). Please see below preview other variables present in the dataset.\r\n\r\nTable 3: Data summary\r\nName\r\nbonus_data\r\nNumber of rows\r\n3889\r\nNumber of columns\r\n51\r\n_______________________\r\n\r\nColumn type frequency:\r\n\r\ncharacter\r\n7\r\nnumeric\r\n44\r\n________________________\r\n\r\nGroup variables\r\n\r\nVariable type: character\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmin\r\nmax\r\nempty\r\nn_unique\r\nwhitespace\r\nncessch\r\n0\r\n1.00\r\n18\r\n21\r\n0\r\n1257\r\n0\r\ncounty\r\n0\r\n1.00\r\n11\r\n17\r\n0\r\n36\r\n0\r\nlocale\r\n0\r\n1.00\r\n14\r\n19\r\n0\r\n12\r\n0\r\ntitle1_status\r\n0\r\n1.00\r\n3\r\n47\r\n0\r\n4\r\n0\r\npupil_tch_ratio\r\n0\r\n1.00\r\n1\r\n6\r\n0\r\n789\r\n0\r\nlea_name\r\n54\r\n0.99\r\n20\r\n43\r\n0\r\n195\r\n0\r\nsch_name\r\n12\r\n1.00\r\n8\r\n60\r\n0\r\n1203\r\n0\r\nVariable type: numeric\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\nsd\r\nhist\r\nncesag\r\n0\r\n1.00\r\n4106916.49\r\n4236.76\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nzip\r\n0\r\n1.00\r\n97366.87\r\n258.54\r\n‚ñá‚ñá‚ñá‚ñÇ‚ñÖ\r\ntotal_n\r\n1\r\n1.00\r\n406.93\r\n318.97\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nfr_lnch_n\r\n428\r\n0.89\r\n180.93\r\n138.74\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nred_lnch_n\r\n428\r\n0.89\r\n31.81\r\n25.57\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nipr_est\r\n12\r\n1.00\r\n303.52\r\n135.95\r\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\r\nleaid\r\n12\r\n1.00\r\n4106915.58\r\n4240.21\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nst_schid\r\n12\r\n1.00\r\n1610.13\r\n1592.21\r\n‚ñá‚ñÇ‚ñÅ‚ñÇ‚ñÇ\r\nlea_cwiftest\r\n54\r\n0.99\r\n0.92\r\n0.07\r\n‚ñÅ‚ñÇ‚ñá‚ñÇ‚ñÖ\r\np_american_indian_alaska_native\r\n12\r\n1.00\r\n0.01\r\n0.05\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_asian\r\n12\r\n1.00\r\n0.03\r\n0.06\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_native_hawaiian_pacific_islander\r\n12\r\n1.00\r\n0.01\r\n0.02\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_black_african_american\r\n12\r\n1.00\r\n0.02\r\n0.05\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\np_hispanic_latino\r\n12\r\n1.00\r\n0.20\r\n0.18\r\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÅ\r\np_white\r\n12\r\n1.00\r\n0.66\r\n0.21\r\n‚ñÅ‚ñÇ‚ñÉ‚ñá‚ñÜ\r\np_multiracial\r\n12\r\n1.00\r\n0.06\r\n0.04\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\nfr_lnch_prop\r\n428\r\n0.89\r\n0.45\r\n0.21\r\n‚ñÖ‚ñá‚ñá‚ñÜ‚ñÇ\r\nred_lnch_prop\r\n428\r\n0.89\r\n0.08\r\n0.04\r\n‚ñá‚ñá‚ñÅ‚ñÅ‚ñÅ\r\nenrl_grd\r\n236\r\n0.94\r\n5.13\r\n1.66\r\n‚ñá‚ñÉ‚ñÉ‚ñÇ‚ñÇ\r\npercent_level_4\r\n556\r\n0.86\r\n22.06\r\n14.25\r\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ\r\npercent_level_3\r\n556\r\n0.86\r\n30.18\r\n10.59\r\n‚ñÅ‚ñá‚ñá‚ñÅ‚ñÅ\r\npercent_level_2\r\n556\r\n0.86\r\n22.93\r\n8.54\r\n‚ñÇ‚ñá‚ñÇ‚ñÅ‚ñÅ\r\npercent_level_1\r\n556\r\n0.86\r\n24.83\r\n14.81\r\n‚ñÜ‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nsch_percent_level_4\r\n152\r\n0.96\r\n22.89\r\n13.04\r\n‚ñÜ‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nsch_percent_level_3\r\n152\r\n0.96\r\n30.46\r\n7.65\r\n‚ñÅ‚ñÇ‚ñá‚ñÉ‚ñÅ\r\nsch_percent_level_2\r\n152\r\n0.96\r\n22.74\r\n6.80\r\n‚ñÅ‚ñá‚ñÇ‚ñÅ‚ñÅ\r\nsch_percent_level_1\r\n152\r\n0.96\r\n23.91\r\n13.16\r\n‚ñá‚ñá‚ñÉ‚ñÅ‚ñÅ\r\nunder_25\r\n180\r\n0.95\r\n0.22\r\n0.07\r\n‚ñÉ‚ñá‚ñÖ‚ñÅ‚ñÅ\r\nunder_50\r\n180\r\n0.95\r\n0.24\r\n0.06\r\n‚ñÇ‚ñá‚ñÜ‚ñÅ‚ñÅ\r\nunder_75\r\n180\r\n0.95\r\n0.17\r\n0.04\r\n‚ñÅ‚ñÖ‚ñá‚ñÅ‚ñÅ\r\nunder_100\r\n180\r\n0.95\r\n0.12\r\n0.03\r\n‚ñÅ‚ñÇ‚ñá‚ñÅ‚ñÅ\r\nunder_200\r\n180\r\n0.95\r\n0.19\r\n0.08\r\n‚ñÇ‚ñá‚ñá‚ñá‚ñÅ\r\nover_200\r\n180\r\n0.95\r\n0.06\r\n0.07\r\n‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÅ\r\npercent_less_than_9th_grade\r\n39\r\n0.99\r\n3.76\r\n3.41\r\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\r\npercent_high_school_graduate_or_higher\r\n39\r\n0.99\r\n89.72\r\n5.83\r\n‚ñÅ‚ñÅ‚ñÇ‚ñá‚ñá\r\npercent_bachelors_degree_or_higher\r\n39\r\n0.99\r\n28.77\r\n15.64\r\n‚ñÇ‚ñá‚ñÇ‚ñÇ‚ñÅ\r\npercent_associates_degree\r\n39\r\n0.99\r\n8.88\r\n2.33\r\n‚ñÅ‚ñÉ‚ñá‚ñÇ‚ñÅ\r\npercent_graduate_or_professional_degree\r\n39\r\n0.99\r\n10.71\r\n7.63\r\n‚ñá‚ñÖ‚ñÇ‚ñÅ‚ñÅ\r\npercent_bachelors_degree\r\n39\r\n0.99\r\n17.11\r\n8.56\r\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\r\npercent_high_school_graduate\r\n39\r\n0.99\r\n26.60\r\n8.26\r\n‚ñÅ‚ñÉ‚ñá‚ñÖ‚ñÅ\r\npercent_9th_to_12th_grade_no_diploma\r\n39\r\n0.99\r\n7.04\r\n3.63\r\n‚ñá‚ñÖ‚ñÅ‚ñÅ‚ñÅ\r\npercent_some_college\r\n39\r\n0.99\r\n27.29\r\n5.14\r\n‚ñÅ‚ñÅ‚ñá‚ñÖ‚ñÅ\r\nmedian_income\r\n0\r\n1.00\r\n27158.20\r\n4434.27\r\n‚ñÉ‚ñá‚ñÇ‚ñÉ‚ñÉ\r\nmedian_rent\r\n0\r\n1.00\r\n942.33\r\n166.09\r\n‚ñÇ‚ñÉ‚ñá‚ñÇ‚ñá\r\n\r\n5. Supplemental small dataset\r\nSupplemental small dataset contains high school dropout rates and out-of-school suspension rates by state districts IDs. This dataset has been used only in XG boost model. For details, please check the post\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-07T16:53:51-08:00",
    "input_file": {}
  },
  {
    "path": "posts/11-28-20_welcome_AY/",
    "title": "Hello!",
    "description": "Welcome to our Machine Learning blog",
    "author": [
      {
        "name": "AY, AG, and CI",
        "url": {}
      }
    ],
    "date": "2020-11-27",
    "categories": [],
    "contents": "\r\nThis blog was created as part of the final project for the EDLD 654 Applied Machine Learning for Educational Data Science, taught by Prof.¬†Daniel Anderson and Prof.¬†Joseph Nese at the University of Oregon. The blog contains application of Machine Learning models to educational data for predictive analysis. Following models were presented in the final project:\r\nLinear regression (add link to my post, if posting separate.)\r\nRandom Forest (add link Ale‚Äôs post if posting separate)\r\nGradient Boosting (add link Chris‚Äôs post, if posting separete)\r\nThe contributors of the blog are:\r\nAsha Yadav\r\nAlejandra\r\nChris Ives\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-04T17:55:44-08:00",
    "input_file": {}
  }
]
